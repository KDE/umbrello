<?xml version="1.0" encoding="UTF-8"?>
<XMI verified="false" xmi.version="1.2" timestamp="2008-08-27T19:20:56" xmlns:UML="http://schema.omg.org/spec/UML/1.3" >
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://umbrello.kde.org</XMI.exporter>
   <XMI.exporterVersion>1.5.8</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel xmi.version="1.3" href="UML.xml" xmi.name="UML" />
 </XMI.header>
 <XMI.content>
  <UML:Model isSpecification="false" isAbstract="false" isLeaf="false" xmi.id="m1" isRoot="false" name="UML Model" >
   <UML:Namespace.ownedElement>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="folder" name="folder" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="datatype" name="datatype" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="constructor" name="constructor" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="friend" name="friend" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="virtual" name="virtual" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QtCore" name="QtCore" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="interface" name="interface" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="obsolete" name="obsolete" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="enum" name="enum" />
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dialog" name="dialog" />
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Logical View" name="Logical View" >
     <UML:Namespace.ownedElement>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Datatypes" name="Datatypes" >
       <UML:Namespace.ownedElement>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gaK9HHMvoIj7" name="int" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="v1KvKb4vz5jr" name="char" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GkfQZGlDo5M5" name="bool" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MhzAzgGuhYo1" name="float" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9sv6ycxCKacr" name="double" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pL5dRRhl6gu5" name="short" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MA03im3qewwc" name="long" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YsnrSPiHlntA" name="unsigned int" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="DavJEpNaxLbg" name="unsigned short" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7eUlaQM7I9yl" name="unsigned long" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Wg0FStPdRJwf" name="string" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Tn6xvJF81TH8" name="undef" >
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="SyjcjX9j2YtS" />
         </UML:GeneralizableElement.generalization>
        </UML:DataType>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hTAgcBW3sQHE" name="TextBlockList*" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="d2p7tg7NMtAb" isRoot="false" xmi.id="VKULHW8WCaH0" name="QMap&lt;QString, TextBlock*>" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="f7G1rhTsLawQ" isRoot="false" xmi.id="rf2HpDpVQn5w" name="CodeDocument*" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="MwFfYBQ2FgYa" isRoot="false" xmi.id="f0G2JJryL6nW" name="const QString&amp;" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="WRUoOYRGE0Zn" isRoot="false" xmi.id="Kr387OdW8qKs" name="QDomDocument&amp;" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="OGGjVgBz5goR" isRoot="false" xmi.id="8jB92Tz5c4RD" name="QDomElement&amp;" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="5jQ58fhxUjWi" isRoot="false" xmi.id="BrdhYqvTUF57" name="QTextStream&amp;" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="8ABALi12YGmn" isRoot="false" xmi.id="Lu4pbaWmS9R0" name="const TextBlock&amp;" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="LjMHz4qXEwuX" isRoot="false" xmi.id="abeY7wglduGy" name="const ContentType&amp;" />
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" elementReference="wCmtTUdaJUas" isRoot="false" xmi.id="bCXrl17nI0wk" name="const CodeBlock&amp;" />
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Class stereotype="QtCore" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hJKzGhjDeJFT" name="QObject" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3g0SeYM2QLXn" name="CodeComment" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="8Rv8Y1IhCcQB" />
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation stereotype="constructor" visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0h3th0whzeVR" name="CodeComment" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XYpitJyGkm9r" type="f7G1rhTsLawQ" value="" name="doc" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="r0ahALirOZYN" type="MwFfYBQ2FgYa" value="&quot;&quot;" name="comment" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zfe3H38hpWwx" name="saveToXMI" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="sqkVSomVwUKQ" type="WRUoOYRGE0Zn" value="" name="doc" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CFhPDFC33wZV" type="OGGjVgBz5goR" value="" name="root" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="J3AXJt2x400i" name="loadFromXMI" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7KDMWGPQns77" type="OGGjVgBz5goR" value="" name="root" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="3g0SeYM2QLXn" xmi.id="8Rv8Y1IhCcQB" parent="8ABALi12YGmn" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MwFfYBQ2FgYa" name="QString" />
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="kJjcKhHRvHHa" name="" >
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="k7vI3JE6jcqS" type="Tn6xvJF81TH8" name="" aggregation="composite" />
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="jKAu7ptr8aRQ" type="f7G1rhTsLawQ" name="" aggregation="none" />
       </UML:Association.connection>
      </UML:Association>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="f7G1rhTsLawQ" xmi.id="UTEMY3DP9nqZ" parent="hJKzGhjDeJFT" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Tn6xvJF81TH8" xmi.id="SyjcjX9j2YtS" parent="hJKzGhjDeJFT" name="" />
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="8ABALi12YGmn" xmi.id="V1oGxYM5jFcf" client="Tn6xvJF81TH8" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="3wrR9vG5HXHo" xmi.id="iHI3zusgLwMJ" parent="f7G1rhTsLawQ" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="O5KIPdcScWqw" name="CPPHeaderCodeDocument" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="eKj84J3RSOO8" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="TA5se9TCTbye" name="CPPSourceCodeDocument" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="65hYS5e1Ntuc" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OR4SxRRJWlZv" name="DClassifierCodeDocument" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="QYhlQcNULKB6" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="NBNzfBt9Lyz0" name="JavaClassifierCodeDocument" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="m3v5L4BTX7WM" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6RAZ26BQXDtS" name="RubyClassifierCodeDocument" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="16zXDTtiFI6M" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="O5KIPdcScWqw" xmi.id="eKj84J3RSOO8" parent="3wrR9vG5HXHo" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="TA5se9TCTbye" xmi.id="65hYS5e1Ntuc" parent="3wrR9vG5HXHo" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="OR4SxRRJWlZv" xmi.id="QYhlQcNULKB6" parent="3wrR9vG5HXHo" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="NBNzfBt9Lyz0" xmi.id="m3v5L4BTX7WM" parent="3wrR9vG5HXHo" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="6RAZ26BQXDtS" xmi.id="16zXDTtiFI6M" parent="3wrR9vG5HXHo" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iHrU5UEEhxRE" name="CodeGenerator" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Zhicxx5km1Qd" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="iHrU5UEEhxRE" xmi.id="Zhicxx5km1Qd" parent="hJKzGhjDeJFT" name="" />
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="4TZoUyRdCDY7" name="" >
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="false" isSpecification="false" xmi.id="OkjpooKL63ZI" type="iHrU5UEEhxRE" name="" aggregation="none" />
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="Ex464Sv6tSuL" type="f7G1rhTsLawQ" name="" aggregation="none" />
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="FPh2EzNI3uaH" name="" >
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="pfNt5GzzgsK7" type="iHrU5UEEhxRE" name="" aggregation="composite" />
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="CHgfmMX0kE0y" type="f7G1rhTsLawQ" name="" aggregation="none" />
       </UML:Association.connection>
      </UML:Association>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qwX6tWnlosv4" name="SimpleCodeGenerator" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Wbqs8ocKmYV7" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="qwX6tWnlosv4" xmi.id="Wbqs8ocKmYV7" parent="iHrU5UEEhxRE" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="RioDFKLz4fWH" name="CppCodeGenerator" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="QjNpB5yTbR7m" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4VLLyWYyPSiB" name="JavaCodeGenerator" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="TTV3sappsC26" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HYSgCYAbHzpW" name="DCodeGenerator" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="yNIoYKtt3TYx" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HATJp0asTwDR" name="RubyCodeGenerator" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="2l85Eg012yYA" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="RioDFKLz4fWH" xmi.id="QjNpB5yTbR7m" parent="iHrU5UEEhxRE" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="4VLLyWYyPSiB" xmi.id="TTV3sappsC26" parent="iHrU5UEEhxRE" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="HYSgCYAbHzpW" xmi.id="yNIoYKtt3TYx" parent="iHrU5UEEhxRE" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="HATJp0asTwDR" xmi.id="2l85Eg012yYA" parent="iHrU5UEEhxRE" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0devhnagACPi" name="AdaWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="0SAzRxISsNxC" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uLsaI6CnTPN2" name="ASWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="sDmiajuM8rmo" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="RDkegKrevVac" name="CSharpWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="8L8GAu3IN0vX" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="G8IRKg7E1zmJ" name="IDLWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="8rgTrZ0QIsCx" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3x4UMRWlfENJ" name="JSWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="kLM2BWx4bwpj" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="0devhnagACPi" xmi.id="0SAzRxISsNxC" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="uLsaI6CnTPN2" xmi.id="sDmiajuM8rmo" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="RDkegKrevVac" xmi.id="8L8GAu3IN0vX" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G8IRKg7E1zmJ" xmi.id="8rgTrZ0QIsCx" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="3x4UMRWlfENJ" xmi.id="kLM2BWx4bwpj" parent="qwX6tWnlosv4" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dqGK9eBp3YOQ" name="PascalWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="iNe89jYS8oRM" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Kv9Vwhm7by3n" name="PerlWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="jWOqKpAFcM6f" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="V0DXuc8itQqV" name="Php5Writer" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="3x3dH9IB6x7m" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bfZ83zaMshro" name="PhpWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="AjPFgU1CbwiL" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MbwwZzj5xuap" name="SQLWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="X146xmRh9dX7" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XgYQ4Otf3Sl5" name="TclWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="sjAzKg4tMmtP" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="y1Svv2jQgHok" name="XmlSchemaWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="OiK29zHVW1RU" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="dqGK9eBp3YOQ" xmi.id="iNe89jYS8oRM" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Kv9Vwhm7by3n" xmi.id="jWOqKpAFcM6f" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="V0DXuc8itQqV" xmi.id="3x3dH9IB6x7m" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="bfZ83zaMshro" xmi.id="AjPFgU1CbwiL" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="MbwwZzj5xuap" xmi.id="X146xmRh9dX7" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="XgYQ4Otf3Sl5" xmi.id="sjAzKg4tMmtP" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="PJPI1G6Lr0HP" xmi.id="lca7MTWUgSfG" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="y1Svv2jQgHok" xmi.id="OiK29zHVW1RU" parent="qwX6tWnlosv4" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jwOkOs8vBX0r" name="MySQLWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="unPoFqgxm5h8" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gFn876THVHL7" name="PostgreSQLWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="fBrPGZYBKZId" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="jwOkOs8vBX0r" xmi.id="unPoFqgxm5h8" parent="MbwwZzj5xuap" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="gFn876THVHL7" xmi.id="fBrPGZYBKZId" parent="MbwwZzj5xuap" name="" />
      <UML:Class stereotype="obsolete" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="X8g6MIwM07CF" name="CppWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="nSrTCpIFMQvT" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="X8g6MIwM07CF" xmi.id="nSrTCpIFMQvT" parent="qwX6tWnlosv4" name="" />
      <UML:Class stereotype="obsolete" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qcxB0qcl2zrA" name="DWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="WQZWoaeKpeN4" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class stereotype="obsolete" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="P8ZiiFaD2O39" name="JavaWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="AhUyLs0Iz8Bs" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class stereotype="obsolete" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="VF23HLo5vlEw" name="RubyWriter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Wz3V5FOYFhCk" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="qcxB0qcl2zrA" xmi.id="WQZWoaeKpeN4" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="P8ZiiFaD2O39" xmi.id="AhUyLs0Iz8Bs" parent="qwX6tWnlosv4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="VF23HLo5vlEw" xmi.id="Wz3V5FOYFhCk" parent="qwX6tWnlosv4" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xEi5TDIkcYs7" name="CPPCodeComment" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="cy9zzNuD3zeG" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="xEi5TDIkcYs7" xmi.id="cy9zzNuD3zeG" parent="3g0SeYM2QLXn" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="g4EvylKsG4dz" name="CPPCodeDocumentation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="yDT1x8RwxB2H" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="P1pD0gRXLqvX" name="DCodeDocumentation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="jg2sjJVroAug" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LfB1jPuh9DXP" name="JavaCodeDocumentation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="cOqRZl5A9YAG" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="F9M7Xe1wgq8g" name="RubyCodeDocumentation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="wPu4x4IxexRu" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="g4EvylKsG4dz" xmi.id="yDT1x8RwxB2H" parent="3g0SeYM2QLXn" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="P1pD0gRXLqvX" xmi.id="jg2sjJVroAug" parent="3g0SeYM2QLXn" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="LfB1jPuh9DXP" xmi.id="cOqRZl5A9YAG" parent="3g0SeYM2QLXn" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="F9M7Xe1wgq8g" xmi.id="wPu4x4IxexRu" parent="3g0SeYM2QLXn" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WRUoOYRGE0Zn" name="QDomDocument" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OGGjVgBz5goR" name="QDomElement" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="wCmtTUdaJUas" xmi.id="y33aHN1CXl5y" parent="8ABALi12YGmn" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="AlkLO8F1ENsy" name="CodeBlockWithComments" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="zk8QFDEsX4iE" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bN5OIiOpQHhf" name="CodeParameter" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="9wdYdimlRX7q" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="bN5OIiOpQHhf" xmi.id="9wdYdimlRX7q" parent="hJKzGhjDeJFT" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="AlkLO8F1ENsy" xmi.id="zk8QFDEsX4iE" parent="wCmtTUdaJUas" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WUh3YNFHtj4I" name="CodeClassField" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="tAF5RBYUnRJd" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="WUh3YNFHtj4I" xmi.id="tAF5RBYUnRJd" parent="bN5OIiOpQHhf" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Ij239LgPp8Hc" name="OwnedCodeBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="qwtzHDf1lcaz" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Ij239LgPp8Hc" xmi.id="qwtzHDf1lcaz" parent="hJKzGhjDeJFT" name="" />
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="JYHqOXqJZNWp" name="" >
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="false" isSpecification="false" xmi.id="kkQy4alvEEYs" type="KCoreTfgzLbR" name="" aggregation="none" />
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="BuUdDABUhRL3" type="8ABALi12YGmn" name="" aggregation="none" />
       </UML:Association.connection>
      </UML:Association>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MUWqJEahCdIv" name="CodeGenerationPolicy" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="cUxfR6zvcqCq" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="U95NLxpwAx5e" name="CodeGenPolicyExt" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Ox91nLpADqBN" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="MUWqJEahCdIv" xmi.id="cUxfR6zvcqCq" parent="hJKzGhjDeJFT" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="U95NLxpwAx5e" xmi.id="Ox91nLpADqBN" parent="hJKzGhjDeJFT" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ROdeEp21W0qp" name="CPPCodeGenerationPolicy" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="x4hfbG7T9sBK" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="ROdeEp21W0qp" xmi.id="x4hfbG7T9sBK" parent="U95NLxpwAx5e" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="U6W9swSq6lon" name="CPPCodeClassField" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="2dJGWV80w6wV" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="U6W9swSq6lon" xmi.id="2dJGWV80w6wV" parent="WUh3YNFHtj4I" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zwh7ZZ49qsor" name="QWidget" />
      <UML:Class stereotype="dialog" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="zAWEYEN1s0SX" name="CodeGenerationPolicyPage" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="wmRM8jihTzPM" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="yFUx992ig7qV" name="CPPCodeGenerationPolicyPage" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Oh2uvQvnQMIO" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="yFUx992ig7qV" xmi.id="Oh2uvQvnQMIO" parent="zAWEYEN1s0SX" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="zAWEYEN1s0SX" xmi.id="wmRM8jihTzPM" parent="zwh7ZZ49qsor" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OsrBjOrGsHAf" name="DCodeGenerationPolicyPage" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="BRUeT4hytTkD" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="npB2tgdJU4c3" name="JavaCodeGenerationPolicyPage" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Ajy3AiH83AUt" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UrloMXdiNUt6" name="RubyCodeGenerationPolicyPage" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="eWDfggXeZ39D" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="OsrBjOrGsHAf" xmi.id="BRUeT4hytTkD" parent="zAWEYEN1s0SX" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="npB2tgdJU4c3" xmi.id="Ajy3AiH83AUt" parent="zAWEYEN1s0SX" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="UrloMXdiNUt6" xmi.id="eWDfggXeZ39D" parent="zAWEYEN1s0SX" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="f7G1rhTsLawQ" xmi.id="Px90G4LPhLsk" parent="KCoreTfgzLbR" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vshOusFS3rfc" name="UMLPackage" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OM9K2aXZCevL" name="CodeMethodBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="PO2bd1g7wJXh" />
        <UML:Generalization xmi.idref="eROQkni5BZmZ" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="OM9K2aXZCevL" xmi.id="PO2bd1g7wJXh" parent="AlkLO8F1ENsy" name="" />
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="xyQrGvXlmAvF" name="m_comment" >
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="JO4XCwLVKMSc" type="AlkLO8F1ENsy" name="" aggregation="composite" />
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="gLKOHchDZ52p" type="3g0SeYM2QLXn" name="" aggregation="none" />
       </UML:Association.connection>
      </UML:Association>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="eIS4WxEeax3z" name="CodeOperation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="1pQezVbgzhgP" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="eIS4WxEeax3z" xmi.id="1pQezVbgzhgP" parent="OM9K2aXZCevL" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Iu53SfgdXlut" name="CPPHeaderCodeOperation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="bLa7ZlxUucTi" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jLvKjwr5hcTJ" name="CPPSourceCodeOperation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="HsbsMIiH4f8o" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qTrW45AMzFPQ" name="DCodeOperation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="azmecuQos1Dw" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="u53RovKYEDqv" name="JavaCodeOperation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="FPR5Of0hVtR8" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9f1qIU76vyaz" name="RubyCodeOperation" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ftcAk1G5C5iy" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Iu53SfgdXlut" xmi.id="bLa7ZlxUucTi" parent="eIS4WxEeax3z" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="jLvKjwr5hcTJ" xmi.id="HsbsMIiH4f8o" parent="eIS4WxEeax3z" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="qTrW45AMzFPQ" xmi.id="azmecuQos1Dw" parent="eIS4WxEeax3z" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="u53RovKYEDqv" xmi.id="FPR5Of0hVtR8" parent="eIS4WxEeax3z" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="9f1qIU76vyaz" xmi.id="ftcAk1G5C5iy" parent="eIS4WxEeax3z" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="NHEMZRBuya6J" name="TextBlock*" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="d2p7tg7NMtAb" name="QMap" />
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="MwFfYBQ2FgYa" xmi.id="jayLwoMZoBgh" client="KCoreTfgzLbR" name="" />
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="8ABALi12YGmn" xmi.id="dacPjJ7Z4Aih" client="KCoreTfgzLbR" name="" />
      <UML:Dependency visibility="public" isSpecification="false" namespace="Logical View" supplier="8Rv8Y1IhCcQB" xmi.id="bBteLaLj37ck" client="KCoreTfgzLbR" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="FPiPtJrSCuDy" name="TextBlockList" />
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="0SkJJATCLRmc" name="m_pCodeDoc" >
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="kOeR74GKCNBG" type="KCoreTfgzLbR" name="" aggregation="composite" />
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="Jn6m7Cf7cPOw" type="f7G1rhTsLawQ" name="" aggregation="none" />
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="BPcdkkvf9ZHx" name="m_textblockVector" >
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="protected" isNavigable="true" isSpecification="false" multiplicity="1" xmi.id="vH4PFePBrPFK" type="KCoreTfgzLbR" name="" aggregation="composite" />
        <UML:AssociationEnd changeability="changeable" visibility="protected" isNavigable="true" isSpecification="false" multiplicity="*" xmi.id="ImKcUAbdZBGI" type="8ABALi12YGmn" name="" aggregation="none" />
       </UML:Association.connection>
      </UML:Association>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4M0YMb7hwr92" name="HierarchicalCodeBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ZoZT0lTU0iOc" />
        <UML:Generalization xmi.idref="sZlsG9ShnJPI" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="4M0YMb7hwr92" xmi.id="ZoZT0lTU0iOc" parent="AlkLO8F1ENsy" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="4M0YMb7hwr92" xmi.id="sZlsG9ShnJPI" parent="KCoreTfgzLbR" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="OM9K2aXZCevL" xmi.id="eROQkni5BZmZ" parent="Ij239LgPp8Hc" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ogqxDbXgm7Fg" name="OwnedHierarchicalCodeBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="G3pXfV3Ath8o" />
        <UML:Generalization xmi.idref="Gzv9g1x0mMKa" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="ogqxDbXgm7Fg" xmi.id="G3pXfV3Ath8o" parent="4M0YMb7hwr92" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="ogqxDbXgm7Fg" xmi.id="Gzv9g1x0mMKa" parent="Ij239LgPp8Hc" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="lvSR6OAGl0B4" name="CodeAccessorMethod" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="bMK7gGbvAuXN" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="lvSR6OAGl0B4" xmi.id="bMK7gGbvAuXN" parent="OM9K2aXZCevL" name="" />
      <UML:Enumeration stereotype="enum" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bHKk9p7sa8bG" name="AccessorType" >
       <UML:EnumerationLiteral visibility="public" isSpecification="false" namespace="bHKk9p7sa8bG" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="k0v2k3rpvPwU" name="GET" />
       <UML:EnumerationLiteral visibility="public" isSpecification="false" namespace="bHKk9p7sa8bG" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZOiD7h89RBzF" name="SET" />
       <UML:EnumerationLiteral visibility="public" isSpecification="false" namespace="bHKk9p7sa8bG" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jjn4IAlVHSbO" name="ADD" />
       <UML:EnumerationLiteral visibility="public" isSpecification="false" namespace="bHKk9p7sa8bG" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pWvFx32gknj2" name="REMOVE" />
       <UML:EnumerationLiteral visibility="public" isSpecification="false" namespace="bHKk9p7sa8bG" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nAgUvUDvPfRa" name="LIST" />
      </UML:Enumeration>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="W9KM3A2gK3yw" name="CPPHeaderCodeAccessorMethod" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="iKYLj8uFHCbL" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PEOFL23VhXQB" name="CPPSourceCodeAccessorMethod" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="TkeivF1Gq0tV" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="W9KM3A2gK3yw" xmi.id="iKYLj8uFHCbL" parent="lvSR6OAGl0B4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="PEOFL23VhXQB" xmi.id="TkeivF1Gq0tV" parent="lvSR6OAGl0B4" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cCtfvPQxlaRq" name="DCodeAccessorMethod" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="SJ3BuU2J9sl0" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ResUt6N6FjJr" name="JavaCodeAccessorMethod" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="eb9lStlRzpdp" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cdmLc2CEC5t8" name="RubyCodeAccessorMethod" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="zhKyUwneb0l4" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="cCtfvPQxlaRq" xmi.id="SJ3BuU2J9sl0" parent="lvSR6OAGl0B4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="ResUt6N6FjJr" xmi.id="eb9lStlRzpdp" parent="lvSR6OAGl0B4" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="cdmLc2CEC5t8" xmi.id="zhKyUwneb0l4" parent="lvSR6OAGl0B4" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XcUrOBmtxmKw" name="CodeClassFieldDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Nf5oET1x5m8r" />
        <UML:Generalization xmi.idref="VEGZ0MQR31EF" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="XcUrOBmtxmKw" xmi.id="Nf5oET1x5m8r" parent="AlkLO8F1ENsy" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="XcUrOBmtxmKw" xmi.id="VEGZ0MQR31EF" parent="Ij239LgPp8Hc" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="OJJ1HVZly9bb" name="CPPHeaderCodeClassFieldDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Uo3Vy9UKSnLh" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kTfHorqKJu52" name="CPPSourceCodeClassFieldDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="oCjEx3tBwJQu" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="OJJ1HVZly9bb" xmi.id="Uo3Vy9UKSnLh" parent="XcUrOBmtxmKw" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="kTfHorqKJu52" xmi.id="oCjEx3tBwJQu" parent="XcUrOBmtxmKw" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="lhR0LFgyIeSw" name="DCodeClassFieldDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="XaNTr2vnJbxo" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CX4wTB2ARs4d" name="JavaCodeClassFieldDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="g4nzgknKe37Y" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="lhR0LFgyIeSw" xmi.id="XaNTr2vnJbxo" parent="XcUrOBmtxmKw" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="CX4wTB2ARs4d" xmi.id="g4nzgknKe37Y" parent="XcUrOBmtxmKw" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="lysPzzxQLIHW" name="RubyCodeClassFieldDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="6TYvrCxs6g4e" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="lysPzzxQLIHW" xmi.id="6TYvrCxs6g4e" parent="XcUrOBmtxmKw" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SHu6nDwDWxEZ" name="CPPHeaderClassDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="x82uzSH96wnq" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="SHu6nDwDWxEZ" xmi.id="x82uzSH96wnq" parent="ogqxDbXgm7Fg" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="om0wYqKDlU2d" name="DClassDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="mDDPrpWK2sem" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UK8CHmsdfe6T" name="JavaClassDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="TMYTDAFCrkH9" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="B4k5dbNoMrqx" name="RubyClassDeclarationBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="g81VtGfjxs2s" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="om0wYqKDlU2d" xmi.id="mDDPrpWK2sem" parent="ogqxDbXgm7Fg" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="UK8CHmsdfe6T" xmi.id="TMYTDAFCrkH9" parent="ogqxDbXgm7Fg" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="B4k5dbNoMrqx" xmi.id="g81VtGfjxs2s" parent="ogqxDbXgm7Fg" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="fCdVDTUs9mun" name="DCodeClassField" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="hmD6kX1QT4fv" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2Orhhvd0SErt" name="JavaCodeClassField" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="cJU6LAzfXn8k" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bLR0Lugy5HSI" name="RubyCodeClassField" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="n00In830jdMB" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="fCdVDTUs9mun" xmi.id="hmD6kX1QT4fv" parent="WUh3YNFHtj4I" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="2Orhhvd0SErt" xmi.id="cJU6LAzfXn8k" parent="WUh3YNFHtj4I" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="bLR0Lugy5HSI" xmi.id="n00In830jdMB" parent="WUh3YNFHtj4I" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rfoPnMdBM4KY" name="DCodeGenerationPolicy" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="IEbbdtXrqESY" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="sc9L4fq9Cd3i" name="JavaCodeGenerationPolicy" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="0q4DIdVw3Asg" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QD1JRKvGxjdk" name="RubyCodeGenerationPolicy" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Bi8Cq0tbsz1E" />
       </UML:GeneralizableElement.generalization>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="rfoPnMdBM4KY" xmi.id="IEbbdtXrqESY" parent="U95NLxpwAx5e" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="sc9L4fq9Cd3i" xmi.id="0q4DIdVw3Asg" parent="U95NLxpwAx5e" name="" />
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="QD1JRKvGxjdk" xmi.id="Bi8Cq0tbsz1E" parent="U95NLxpwAx5e" name="" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="f7G1rhTsLawQ" name="CodeDocument" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="UTEMY3DP9nqZ" />
        <UML:Generalization xmi.idref="Px90G4LPhLsk" />
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vsgTVdpYyyL1" name="setFileExtension" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QooMb1Yow6sZ" type="MwFfYBQ2FgYa" value="" name="new_var" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ViITedVGC0Um" name="getFileExtension" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2huYl5yObvLP" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qYJeUQU1ngR3" name="setFileName" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="07Wfi1ts1NfQ" type="MwFfYBQ2FgYa" value="" name="new_var" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="BBSjT4BrYCeE" name="getFileName" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LPTaHHC8yff1" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="oucIZIJSBJoo" name="setPackage" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZRY4DQeWzxnR" type="vshOusFS3rfc" value="" name="new_var" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="odrhTW5NPIqQ" name="getPackage" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="z1s3Z2xuXGEz" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="PKQ6ExpJtDtp" name="getPath" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ssKAEantlKyn" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CxuJvYwvbwAS" name="setID" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZkkdyfTFZe6M" type="MwFfYBQ2FgYa" value="" name="new_id" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="4CF17WufQnEM" name="getID" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="7wNhg59f6zhd" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5jQ58fhxUjWi" name="QTextStream" />
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wCmtTUdaJUas" name="CodeBlock" >
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="y33aHN1CXl5y" />
        <UML:Generalization xmi.idref="3L2VUTTPotpQ" />
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="PoOhnLP1aPev" type="LjMHz4qXEwuX" name="m_contentType" />
        <UML:Operation stereotype="constructor" visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hslVjat5u4kJ" comment="Constructor with QString so we can create and populate it in&#xa;one step.&#xa;@param parent   the parent of this code block&#xa;@param body     the code or body of this code block" name="CodeBlock" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3k00I0hbQPZI" type="rf2HpDpVQn5w" value="" name="parent" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="xmFr0dDhVyCE" type="f0G2JJryL6nW" value="" name="body" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Z5JR91iAki90" comment="Empty Destructor" name="~ CodeBlock" />
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iob7B8P7teyt" comment="Set the value of m_contentType&#xa;specifies whether the content (text) of this object was generated by the code&#xa;generator or was supplied by the user.&#xa;@param new_var the new value of m_contentType" name="setContentType" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FBal7kxenF5u" type="LjMHz4qXEwuX" value="" name="new_var" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Eo3yWCwDyXK9" comment="Get the value of m_contentType&#xa;specifies whether the content (text) of this object was generated by the code&#xa;generator or was supplied by the user.&#xa;@return the value of m_contentType" name="getContentType" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ejEXLCQaLyJT" type="LjMHz4qXEwuX" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="iF5VUBNixQfR" comment="Return a string representation of ContentType.&#xa;&#xa;@param  val  the enum value of the ContentType&#xa;@return      the string representation of the enum" name="enumToString" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="48C1ZrS7Q5gV" type="MwFfYBQ2FgYa" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="5eXOcorI3vlV" type="abeY7wglduGy" value="" name="val" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="1KEfCUbF66ei" comment="Save the XMI representation of this object.&#xa;@param doc    the xmi document&#xa;@param root   the starting point to append" name="saveToXMI" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vT0wOlSSucRR" type="Kr387OdW8qKs" value="" name="doc" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RuYrxCLwUXZh" type="8jB92Tz5c4RD" value="" name="root" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0Bu6FYpA2n5O" comment="Load params from the appropriate XMI element node.&#xa;@param root   the starting point to load from" name="loadFromXMI" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZVrR7IqYAMN5" type="8jB92Tz5c4RD" value="" name="root" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Zi21EbgEkbK0" comment="Set the class attributes from a passed object.&#xa;@param obj   text block from which the attributes are taken" name="setAttributesFromObject" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9789vBYSgNtl" type="NHEMZRBuya6J" value="" name="obj" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="protected" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dhJm3hpaNrcb" comment="Set attributes of the node that represents this class&#xa;in the XMI document.&#xa;@param doc            the xmi document&#xa;@param blockElement   the xmi element holding the attributes" name="setAttributesOnNode" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RIn9t891FG8A" type="Kr387OdW8qKs" value="" name="doc" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Rea61Rrd89NC" type="8jB92Tz5c4RD" value="" name="blockElement" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="protected" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qCkB2MlTdYcU" comment="Set the class attributes of this object from&#xa;the passed element node.&#xa;@param element   the xmi element from which to load" name="setAttributesFromNode" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ekVsyc0NGbTI" type="8jB92Tz5c4RD" value="" name="element" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation stereotype="friend" visibility="protected" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2JtBSGLGQ5PS" name="operator &lt;&lt;" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="VFWjEitpsQhd" type="BrdhYqvTUF57" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QAv3hWVJE1BC" type="BrdhYqvTUF57" value="" name="str" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="EH0fLP7jY1kD" type="bCXrl17nI0wk" value="" name="obj" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Enumeration stereotype="enum" visibility="public" isSpecification="false" namespace="wCmtTUdaJUas" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LjMHz4qXEwuX" comment="Describes the creation of the content.&#xa;@enum AutoGenerated  the content was generated by code generation itself&#xa;@enum UserGenerated  the content was entered by the user" name="ContentType" >
         <UML:EnumerationLiteral visibility="public" isSpecification="false" namespace="LjMHz4qXEwuX" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="e8vLWzPmWS6r" name="AutoGenerated" />
         <UML:EnumerationLiteral visibility="public" isSpecification="false" namespace="LjMHz4qXEwuX" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ovd0ZktsGsH0" name="UserGenerated" />
        </UML:Enumeration>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8ABALi12YGmn" comment="The fundemental unit of text within an output file containing code." name="TextBlock" >
       <UML:Classifier.feature>
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="z7Zd6YnAa4bu" type="MwFfYBQ2FgYa" name="m_text" />
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="IN3iCLmKqg4a" type="MwFfYBQ2FgYa" name="m_tag" />
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="B7IFg5OG7x8U" type="GkfQZGlDo5M5" name="m_canDelete" />
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="6gOayjeewxQG" type="GkfQZGlDo5M5" name="m_writeOutText" />
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="n6IMkRT0g744" type="gaK9HHMvoIj7" name="m_indentationLevel" />
        <UML:Attribute visibility="private" isSpecification="false" xmi.id="LB1UgLim16Ly" type="MwFfYBQ2FgYa" name="m_parentDocument" />
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="aKFz1islnjuY" name="setText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gEW447OH4Pxw" type="MwFfYBQ2FgYa" value="" name="text" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kd3IlRdigGEq" name="appendText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gG5Lnf11C43H" type="MwFfYBQ2FgYa" value="" name="text" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qFFxzsyGbPrH" comment="Get the value of m_text&#xa;The actual text of this code block.&#xa;@return   the value of m_text" name="getText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="5POjl6UkDpg1" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UstjE74Oi74Q" comment="Get the tag of this text block. This tag&#xa;may be used to find this text block in the code document&#xa;to which it belongs.&#xa;@return   the tag" name="getTag" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="MC4E5mRCopsw" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation stereotype="constructor" visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7pSSqjfS0NL2" comment="Constructor." name="TextBlock" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lAbUu8ZjY2XG" type="rf2HpDpVQn5w" value="" name="parent" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vGwjJtb51DZt" type="f0G2JJryL6nW" value="" name="text" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="J9dp9A5o8MqP" comment="Destructor." name="~ TextBlock" />
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dfNwl9ShPOOh" comment="Set the value of m_text&#xa;The actual text of this code block.&#xa;@param text   the new value of m_text" name="setText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FzmEAJ8RQlHZ" type="f0G2JJryL6nW" value="" name="text" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tMN0gBPJqlDc" comment="Add text to this object.&#xa;@param text   the text to add" name="appendText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ufJH2hyFeiUp" type="f0G2JJryL6nW" value="" name="text" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Broq8JV3mRbv" comment="Set the tag of this text block. This tag&#xa;may be used to find this text block in the code document&#xa;to which it belongs.&#xa;@param value   the new value for the tag" name="setTag" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="oy7oYh6dJaWI" type="f0G2JJryL6nW" value="" name="value" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GvpV5h6GYv6e" comment="Get the value of m_parentDoc&#xa;@return the value of m_parentDoc" name="getParentDocument" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Cbiy0HroGwbm" type="rf2HpDpVQn5w" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dfNwFtDVm00r" comment="Set the value of m_writeOutText&#xa;Whether or not to include the text of this TextBlock into a file.&#xa;@param write   the new value of m_writeOutText" name="setWriteOutText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="h55DyBsAkY6j" type="GkfQZGlDo5M5" value="" name="write" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pvX3s6pTlCQy" comment="Get the value of m_writeOutText&#xa;Whether or not to include the text of this TextBlock into a file.&#xa;@return the value of m_writeOutText" name="getWriteOutText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="3dSodQfIVjTR" type="GkfQZGlDo5M5" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uLbdtfMhbrkR" comment="Set how many times to indent this text block.&#xa;The amount of each indentation is determined from the parent&#xa;codedocument codegeneration policy.&#xa;@param level   the new value for the indentation level" name="setIndentationLevel" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wYufiKekv6YW" type="gaK9HHMvoIj7" value="" name="level" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WBm0uGRpb1QT" comment="Get how many times to indent this text block.&#xa;The amount of each indentation is determined from the parent&#xa;codedocument codegeneration policy.&#xa;@return   the indentation level" name="getIndentationLevel" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="gm8HbsiXObD5" type="gaK9HHMvoIj7" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vpppvNJPY6PT" comment="Get the actual amount of indentation for a given level of indentation.&#xa;@param level   the level of interest&#xa;@return        the indentation string" name="getIndentationString" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LSXj3imxXbmQ" type="MwFfYBQ2FgYa" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="MrGvseMWQUmz" type="gaK9HHMvoIj7" value="" name="level" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="y3pV9FwT4APu" comment="Get how much a single &quot;level&quot; of indentation will actually indent.&#xa;@return   the unit of indentation (for one level)" name="getIndentation" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ojOCEABZdgGe" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="O3btcLJZP94Y" comment="Get the new line chars which ends the line.&#xa;@return   the ending chars for new line" name="getNewLineEndingChars" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="My0Q8NIu6g4K" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="rFrSu66I7gAj" comment="Format a long text string to be more readable.&#xa;@param text               the original text for formatting&#xa;@param linePrefix         a line prefix&#xa;@param breakStr           a break string&#xa;@param alwaysAddBreak     control to add always a break string&#xa;@param lastLineHasBreak   control to add a break string to the last line&#xa;@return                   the new formatted text" name="formatMultiLineText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="lzw5ha1j8s1a" type="MwFfYBQ2FgYa" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="zTIOcKvyIvMO" type="f0G2JJryL6nW" value="" name="text" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="IcGMJKh8YWYS" type="f0G2JJryL6nW" value="" name="linePrefix" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ccijIsRIMjew" type="f0G2JJryL6nW" value="" name="breakStr" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2ZtKSDhiqx57" type="GkfQZGlDo5M5" value="" name="alwaysAddBreak" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GkFmGnErPuYg" type="GkfQZGlDo5M5" value="" name="lastLineHasBreak" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="6iJueM1s6EeM" comment="UnFormat a long text string. Typically, this means removing&#xa;the indentation (linePrefix) and/or newline chars from each line.&#xa;If an indentation is not specified, then the current indentation is used.&#xa;@param text     the original text for unformatting&#xa;@param indent   the indentation&#xa;@return         the unformatted text" name="unformatText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="sPFydtJcjUzS" type="MwFfYBQ2FgYa" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="1qBOkk2VhyaO" type="f0G2JJryL6nW" value="" name="text" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Za5hS7FWnWOP" type="f0G2JJryL6nW" value="" name="indent" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CzvuyUGV4KAU" comment="Return the text in the right format. Returned string is empty&#xa;if m_writeOutText is false.&#xa;@return  QString" name="toString" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="PPzCwNamlplO" type="MwFfYBQ2FgYa" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="h2zOUwqhvmZr" comment="Encode text for XML storage.&#xa;We simply convert all types of newLines to the &quot;\n&quot; or &amp;#010;&#xa;entity.&#xa;@param text       the not yet encoded text&#xa;@param endChars   the chars at the end of each line&#xa;@return           the encoded text" name="encodeText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="5wV1g4qurDCx" type="MwFfYBQ2FgYa" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GnMI7WkWujhq" type="f0G2JJryL6nW" value="" name="text" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7Fas4LEjLB8q" type="f0G2JJryL6nW" value="" name="endChars" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" ownerScope="classifier" isRoot="false" xmi.id="hvTbeAPjN0ZQ" comment="Decode text from XML storage.&#xa;We simply convert all newLine entity &amp;#010; to chosen line ending.&#xa;@param text       the not yet decoded text&#xa;@param endChars   the chars at the end of each line&#xa;@return           the decoded text" name="decodeText" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="QmCokmE3YLiT" type="MwFfYBQ2FgYa" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Jm9fvFV1C00s" type="f0G2JJryL6nW" value="" name="text" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2qlr3volqIMV" type="f0G2JJryL6nW" value="" name="endChars" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="true" isLeaf="false" isRoot="false" xmi.id="bBSn9SdBJO3K" comment="Save the XMI representation of this object&#xa;@param doc    the xmi document&#xa;@param root   the starting point to append" name="saveToXMI" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="v6reXQn0BxQp" type="Kr387OdW8qKs" value="" name="doc" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="aZ1sRbOLfExD" type="8jB92Tz5c4RD" value="" name="root" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="true" isLeaf="false" isRoot="false" xmi.id="ekDohddoLmxL" comment="Load params from the appropriate XMI element node.&#xa;@param root   the starting point in the xmi document to load from" name="loadFromXMI" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="EuOozq1ZP3Sp" type="8jB92Tz5c4RD" value="" name="root" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="coAI27TfreTZ" comment="Determine if its OK to delete this textblock from the document.&#xa;Used by the text editor to know if deletion could cause a crash of&#xa;the program.&#xa;@return   the value of m_canDelete" name="canDelete" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="F4NYoIt2DIqC" type="GkfQZGlDo5M5" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8qjXrBKT0Uj0" comment="Set the class attributes from a passed object.&#xa;@param obj   text block from which the attributes are taken" name="setAttributesFromObject" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZCdRo4y46Jcv" type="NHEMZRBuya6J" value="" name="obj" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bWvmokwuYgPP" comment="Used by the CodeEditor. It provides it with an appropriate&#xa;starting string for a new line of text within the given textblock&#xa;(for example a string with the proper indentation).&#xa;If the indentation amount is '0' the current indentation string will&#xa;be used.&#xa;&lt;p>&#xa;TODO: Can be refactored away and replaced with&#xa;&lt;a href=&quot;#getIndentationString&quot;>getIndentationString&lt;/a>.&#xa;@param indentAmount   the number of indent steps to use&#xa;@return               the new line" name="getNewEditorLine" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="UBdaSFV1jPoV" type="MwFfYBQ2FgYa" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rkspEaookRDZ" type="gaK9HHMvoIj7" value="" name="indentAmount" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="7iPfOp4EXu3l" comment="Ush. These are terrifically bad and must one day go away.&#xa;Both methods indicate the range of lines in this textblock&#xa;which may be edited by the codeeditor (assuming that any are&#xa;actually editable). The default case is no lines are editable.&#xa;The line numbering starts with '0' and a '-1' means no line&#xa;qualifies.&#xa;@return   line number" name="firstEditableLine" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="UpXDHimlrNJJ" type="gaK9HHMvoIj7" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="anLKC7pHpDwC" comment="@see firstEditableLine" name="lastEditableLine" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="0yQXsRGLHmWW" type="gaK9HHMvoIj7" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="protected" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="UIFMfYdFLwXV" comment="Set the attribute m_canDelete.&#xa;@param canDelete   the new value to set" name="setCanDelete" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="1LmpYg1YeP5V" type="GkfQZGlDo5M5" value="" name="canDelete" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="protected" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="oJo35KZYamuF" comment="Causes the text block to release all of its connections&#xa;and any other text blocks that it 'owns'.&#xa;needed to be called prior to deletion of the textblock." name="release" />
        <UML:Operation visibility="protected" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JVScQ06RLqEr" comment="Set attributes of the node that represents this class&#xa;in the XMI document.&#xa;@param doc            the xmi document&#xa;@param blockElement   the xmi element holding the attributes" name="setAttributesOnNode" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="XFN9cQcRjOUp" type="Kr387OdW8qKs" value="" name="doc" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="i2NImFV5iwg8" type="8jB92Tz5c4RD" value="" name="blockElement" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="protected" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="umYDcm472RFc" comment="Set the class attributes of this object from&#xa;the passed element node.&#xa;@param element   the xmi element from which to load" name="setAttributesFromNode" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rr1YGULwWiDG" type="8jB92Tz5c4RD" value="" name="element" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation stereotype="friend" visibility="protected" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vgKec0kUkIhK" name="operator &lt;&lt;" >
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="L3ZJjlQ4fVrG" type="BrdhYqvTUF57" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DoZx6HIB0iE7" type="BrdhYqvTUF57" value="" name="os" />
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="xMRRcVWpJ6lN" type="Lu4pbaWmS9R0" value="" name="obj" />
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Class visibility="public" isSpecification="false" namespace="8ABALi12YGmn" isAbstract="true" isLeaf="false" isRoot="false" xmi.id="KCoreTfgzLbR" comment="This abstract class is for code generator objects which 'own' text blocks." name="CodeGenObjectWithTextBlocks" >
         <UML:Classifier.feature>
          <UML:Attribute visibility="private" isSpecification="false" xmi.id="x4pHgUko8Lze" type="VKULHW8WCaH0" name="m_textBlockTagMap" />
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wE8vEthGr4Qv" name="addTextBlock" >
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ipVVORvVVB5U" type="GkfQZGlDo5M5" />
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="LHnlEZjtfZ8p" type="8ABALi12YGmn" value="" comment="Add a TextBlock object to the m_textblockVector List.&#xa;@return boolean value where false means not added because an TextBlock&#xa;                object with that tag already exists in this document." name="add_object" />
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wtnbT6sEs6nZ" name="removeTextBlock" >
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ezcQA6QHAPPD" type="GkfQZGlDo5M5" />
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="4Ga1Vw8oDU09" type="8ABALi12YGmn" value="" name="remove_object" />
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="true" isLeaf="false" isRoot="false" xmi.id="IFrMXPEKRSZM" name="insertTextBlock" >
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="W192pShuELOE" type="GkfQZGlDo5M5" />
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="zQDiCNd4vn3u" type="NHEMZRBuya6J" value="" name="newBlock" />
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="zWqLh6oeWzMg" type="NHEMZRBuya6J" value="" name="existingBlock" />
            <UML:Parameter visibility="private" isSpecification="false" xmi.id="KxlFim843KQa" type="GkfQZGlDo5M5" value="" name="after" />
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cqmLcuPdEnBy" name="getTextBlockList" >
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="Xp6tGsV1E8SL" type="hTAgcBW3sQHE" />
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class visibility="public" isSpecification="false" namespace="8ABALi12YGmn" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="3wrR9vG5HXHo" name="ClassifierCodeDocument" >
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="iHI3zusgLwMJ" />
         </UML:GeneralizableElement.generalization>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="wCmtTUdaJUas" xmi.id="3L2VUTTPotpQ" parent="8ABALi12YGmn" name="" />
     </UML:Namespace.ownedElement>
     <XMI.extension xmi.extender="umbrello" >
      <diagrams>
       <diagram showopsig="1" linecolor="#ff0000" snapx="10" showattribassocs="1" snapy="10" linewidth="0" showattsig="1" showpackage="1" showstereotype="1" name="CodeGenerator" font="Sans Serif,10,-1,0,50,0,0,0,0,0" canvasheight="1187" canvaswidth="3234" localid="" snapcsgrid="0" showgrid="0" showops="1" usefillcolor="1" fillcolor="#ffff00" zoom="81" xmi.id="DgXxnJdKD0II" documentation="" showscope="1" snapgrid="0" showatts="1" type="1" >
        <widgets>
         <notewidget width="263" showstereotype="1" x="21" noteType="0" y="18" usesdiagramusefillcolor="1" usesdiagramfillcolor="0" isinstance="0" fillcolor="#dcdcdc" height="82" linecolor="#000000" xmi.id="ty3eUhci7U5k" usefillcolor="1" linewidth="none" font="Sans Serif,10,-1,0,50,0,0,0,0,0" text="Advanced code generation hierarchy.&#xa;Created by Brian Thomas.&#xa;Diagram by Andi Fischer, 2008-07-27." />
         <notewidget width="198" showstereotype="1" x="842" noteType="0" y="27" usesdiagramusefillcolor="1" usesdiagramfillcolor="0" isinstance="0" fillcolor="#ffdca8" height="50" linecolor="#000000" xmi.id="OfZTwkXZXDIz" usefillcolor="1" linewidth="none" font="Sans Serif,10,-1,0,50,0,0,0,0,0" text="without QObject inheritance" />
         <notewidget width="184" showstereotype="1" x="1785" noteType="0" y="19" usesdiagramusefillcolor="1" usesdiagramfillcolor="0" isinstance="0" fillcolor="#ffdca8" height="50" linecolor="#000000" xmi.id="Nlxxa2qY3S1k" usefillcolor="1" linewidth="none" font="Sans Serif,10,-1,0,50,0,0,0,0,0" text="with QObject inheritance." />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="808" showattsigs="601" showstereotype="1" y="238" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="175" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="8ABALi12YGmn" showscope="1" height="187" showopsigs="601" />
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="849" showattsigs="601" showstereotype="1" y="482" showattributes="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" width="353" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="3g0SeYM2QLXn" showscope="1" height="76" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1729" showattsigs="601" showstereotype="1" y="176" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="98" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="iHrU5UEEhxRE" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="721" showattsigs="601" showstereotype="1" y="581" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="121" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="xEi5TDIkcYs7" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="734" showattsigs="601" showstereotype="1" y="625" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="152" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="g4EvylKsG4dz" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="915" showattsigs="601" showstereotype="1" y="625" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="136" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="P1pD0gRXLqvX" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1071" showattsigs="601" showstereotype="1" y="624" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="155" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="LfB1jPuh9DXP" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1244" showattsigs="601" showstereotype="1" y="627" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="157" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="F9M7Xe1wgq8g" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="0" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1462" showattsigs="601" showstereotype="1" y="437" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="180" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="wCmtTUdaJUas" showscope="1" height="42" showopsigs="601" />
         <enumwidget width="73" showstereotype="1" x="1506" y="364" usesdiagramusefillcolor="1" usesdiagramfillcolor="1" isinstance="0" fillcolor="none" height="52" linecolor="none" xmi.id="LjMHz4qXEwuX" showpackage="1" usefillcolor="1" linewidth="none" font="Sans Serif,8,-1,0,50,0,0,0,0,0" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1491" showattsigs="601" showstereotype="1" y="614" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="161" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="AlkLO8F1ENsy" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="1072" showattsigs="601" showstereotype="1" y="79" showattributes="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" drawascircle="0" width="472" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="KCoreTfgzLbR" showscope="1" height="102" showopsigs="601" />
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="1882" showattsigs="601" showstereotype="1" y="89" showattributes="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" width="65" isinstance="0" usefillcolor="1" fillcolor="#c0ffff" xmi.id="hJKzGhjDeJFT" showscope="1" height="50" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1878" showattsigs="601" showstereotype="1" y="338" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="222" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="f7G1rhTsLawQ" showscope="1" height="178" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2278" showattsigs="601" showstereotype="1" y="248" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="101" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="bN5OIiOpQHhf" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2279" showattsigs="601" showstereotype="1" y="337" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="100" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="WUh3YNFHtj4I" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1682" showattsigs="601" showstereotype="1" y="754" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="112" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="Ij239LgPp8Hc" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2145" showattsigs="601" showstereotype="1" y="560" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="154" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="3wrR9vG5HXHo" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1926" showattsigs="601" showstereotype="1" y="643" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="166" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="O5KIPdcScWqw" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1955" showattsigs="601" showstereotype="1" y="684" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="165" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="TA5se9TCTbye" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2142" showattsigs="601" showstereotype="1" y="684" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="163" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="OR4SxRRJWlZv" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2319" showattsigs="601" showstereotype="1" y="685" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="182" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="NBNzfBt9Lyz0" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2517" showattsigs="601" showstereotype="1" y="686" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="184" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="6RAZ26BQXDtS" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2459" showattsigs="601" showstereotype="1" y="223" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="138" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="MUWqJEahCdIv" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2709" showattsigs="601" showstereotype="1" y="218" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="117" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="U95NLxpwAx5e" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2552" showattsigs="601" showstereotype="1" y="299" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="163" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="ROdeEp21W0qp" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2131" showattsigs="601" showstereotype="1" y="419" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="125" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="U6W9swSq6lon" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="242" showattsigs="601" showstereotype="1" y="208" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="58" isinstance="0" usefillcolor="1" fillcolor="#c0ffff" xmi.id="zwh7ZZ49qsor" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="198" showattsigs="601" showstereotype="1" y="295" showattributes="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" width="167" isinstance="0" usefillcolor="1" fillcolor="#ffff00" xmi.id="zAWEYEN1s0SX" showscope="1" height="50" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="18" showattsigs="601" showstereotype="1" y="383" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="192" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="yFUx992ig7qV" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="68" showattsigs="601" showstereotype="1" y="427" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="176" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="OsrBjOrGsHAf" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="142" showattsigs="601" showstereotype="1" y="474" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="195" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="npB2tgdJU4c3" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="224" showattsigs="601" showstereotype="1" y="515" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="197" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="UrloMXdiNUt6" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1188" showattsigs="601" showstereotype="1" y="856" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="115" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="OM9K2aXZCevL" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="891" showattsigs="601" showstereotype="1" y="915" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="96" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="eIS4WxEeax3z" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="615" showattsigs="601" showstereotype="1" y="977" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="163" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="Iu53SfgdXlut" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="633" showattsigs="601" showstereotype="1" y="1017" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="162" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="jLvKjwr5hcTJ" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="813" showattsigs="601" showstereotype="1" y="1020" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="105" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="qTrW45AMzFPQ" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="932" showattsigs="601" showstereotype="1" y="1019" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="124" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="u53RovKYEDqv" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1070" showattsigs="601" showstereotype="1" y="1016" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="126" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="9f1qIU76vyaz" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1926" showattsigs="601" showstereotype="1" y="760" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="150" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="4M0YMb7hwr92" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2114" showattsigs="601" showstereotype="1" y="838" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="182" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="ogqxDbXgm7Fg" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1404" showattsigs="601" showstereotype="1" y="1005" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="138" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="lvSR6OAGl0B4" showscope="1" height="33" showopsigs="601" />
         <enumwidget width="75" showstereotype="1" x="1419" y="900" usesdiagramusefillcolor="1" usesdiagramfillcolor="1" isinstance="0" fillcolor="none" height="91" linecolor="none" xmi.id="bHKk9p7sa8bG" showpackage="1" usefillcolor="1" linewidth="none" font="Sans Serif,8,-1,0,50,0,0,0,0,0" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1157" showattsigs="601" showstereotype="1" y="1106" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="205" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="W9KM3A2gK3yw" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1190" showattsigs="601" showstereotype="1" y="1150" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="204" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="PEOFL23VhXQB" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1410" showattsigs="601" showstereotype="1" y="1143" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="147" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="cCtfvPQxlaRq" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1565" showattsigs="601" showstereotype="1" y="1142" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="166" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="ResUt6N6FjJr" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1739" showattsigs="601" showstereotype="1" y="1141" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="168" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="cdmLc2CEC5t8" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1753" showattsigs="601" showstereotype="1" y="928" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="199" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="XcUrOBmtxmKw" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1580" showattsigs="601" showstereotype="1" y="991" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="266" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="OJJ1HVZly9bb" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1699" showattsigs="601" showstereotype="1" y="1034" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="265" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="kTfHorqKJu52" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1974" showattsigs="601" showstereotype="1" y="1033" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="208" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="lhR0LFgyIeSw" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2191" showattsigs="601" showstereotype="1" y="1032" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="227" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="CX4wTB2ARs4d" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2437" showattsigs="601" showstereotype="1" y="1029" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="229" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="lysPzzxQLIHW" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1993" showattsigs="601" showstereotype="1" y="901" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="209" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="SHu6nDwDWxEZ" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2221" showattsigs="601" showstereotype="1" y="902" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="151" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="om0wYqKDlU2d" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2389" showattsigs="601" showstereotype="1" y="902" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="170" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="UK8CHmsdfe6T" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2575" showattsigs="601" showstereotype="1" y="903" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="172" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="B4k5dbNoMrqx" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2268" showattsigs="601" showstereotype="1" y="419" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="109" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="fCdVDTUs9mun" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2388" showattsigs="601" showstereotype="1" y="419" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="128" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="2Orhhvd0SErt" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2524" showattsigs="601" showstereotype="1" y="418" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="130" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="bLR0Lugy5HSI" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2728" showattsigs="601" showstereotype="1" y="299" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="147" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="rfoPnMdBM4KY" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="2884" showattsigs="601" showstereotype="1" y="300" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="166" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="sc9L4fq9Cd3i" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="3062" showattsigs="601" showstereotype="1" y="299" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="168" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="QD1JRKvGxjdk" showscope="1" height="33" showopsigs="601" />
        </widgets>
        <messages/>
        <associations>
         <assocwidget indexa="1" indexb="1" widgetaid="3g0SeYM2QLXn" linecolor="none" totalcounta="2" xmi.id="8Rv8Y1IhCcQB" widgetbid="8ABALi12YGmn" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="981" starty="482" />
           <endpoint endx="981" endy="425" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="xEi5TDIkcYs7" linecolor="none" totalcounta="2" xmi.id="cy9zzNuD3zeG" widgetbid="3g0SeYM2QLXn" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="842" starty="581" />
           <endpoint endx="849" endy="558" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="g4EvylKsG4dz" linecolor="none" totalcounta="2" xmi.id="yDT1x8RwxB2H" widgetbid="3g0SeYM2QLXn" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="886" starty="625" />
           <endpoint endx="886" endy="558" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="P1pD0gRXLqvX" linecolor="none" totalcounta="2" xmi.id="jg2sjJVroAug" widgetbid="3g0SeYM2QLXn" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1030" starty="625" />
           <endpoint endx="1030" endy="558" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="4" widgetaid="LfB1jPuh9DXP" linecolor="none" totalcounta="2" xmi.id="cOqRZl5A9YAG" widgetbid="3g0SeYM2QLXn" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1175" starty="624" />
           <endpoint endx="1175" endy="558" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="5" widgetaid="F9M7Xe1wgq8g" linecolor="none" totalcounta="2" xmi.id="wPu4x4IxexRu" widgetbid="3g0SeYM2QLXn" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1244" starty="627" />
           <endpoint endx="1202" endy="558" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="wCmtTUdaJUas" linecolor="none" totalcounta="2" xmi.id="y33aHN1CXl5y" widgetbid="8ABALi12YGmn" totalcountb="3" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1462" starty="437" />
           <endpoint endx="983" endy="425" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="AlkLO8F1ENsy" linecolor="none" totalcounta="2" xmi.id="zk8QFDEsX4iE" widgetbid="wCmtTUdaJUas" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1560" starty="614" />
           <endpoint endx="1560" endy="479" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="3" indexb="2" widgetaid="f7G1rhTsLawQ" linecolor="none" totalcounta="4" xmi.id="UTEMY3DP9nqZ" widgetbid="hJKzGhjDeJFT" totalcountb="3" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1922" starty="338" />
           <endpoint endx="1922" endy="139" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="iHrU5UEEhxRE" linecolor="none" totalcounta="2" xmi.id="Zhicxx5km1Qd" widgetbid="hJKzGhjDeJFT" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1827" starty="176" />
           <endpoint endx="1882" endy="139" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="bN5OIiOpQHhf" linecolor="none" totalcounta="2" xmi.id="9wdYdimlRX7q" widgetbid="hJKzGhjDeJFT" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2278" starty="248" />
           <endpoint endx="1947" endy="139" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="Ij239LgPp8Hc" linecolor="none" totalcounta="2" xmi.id="qwtzHDf1lcaz" widgetbid="hJKzGhjDeJFT" totalcountb="3" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1794" starty="754" />
           <endpoint endx="1882" endy="139" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="3wrR9vG5HXHo" linecolor="none" totalcounta="2" xmi.id="iHI3zusgLwMJ" widgetbid="f7G1rhTsLawQ" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2145" starty="560" />
           <endpoint endx="2100" endy="516" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="iHrU5UEEhxRE" linecolor="none" totalcounta="3" xmi.id="4TZoUyRdCDY7" widgetbid="f7G1rhTsLawQ" totalcountb="4" type="512" linewidth="none" >
          <linepath>
           <startpoint startx="1827" starty="209" />
           <endpoint endx="1878" endy="338" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="2" widgetaid="iHrU5UEEhxRE" linecolor="none" totalcounta="3" xmi.id="FPh2EzNI3uaH" widgetbid="f7G1rhTsLawQ" totalcountb="4" type="510" linewidth="none" >
          <linepath>
           <startpoint startx="1827" starty="209" />
           <endpoint endx="1878" endy="338" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="WUh3YNFHtj4I" linecolor="none" totalcounta="2" xmi.id="tAF5RBYUnRJd" widgetbid="bN5OIiOpQHhf" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2324" starty="337" />
           <endpoint endx="2324" endy="281" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="O5KIPdcScWqw" linecolor="none" totalcounta="2" xmi.id="eKj84J3RSOO8" widgetbid="3wrR9vG5HXHo" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2092" starty="643" />
           <endpoint endx="2145" endy="593" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="TA5se9TCTbye" linecolor="none" totalcounta="2" xmi.id="65hYS5e1Ntuc" widgetbid="3wrR9vG5HXHo" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2120" starty="684" />
           <endpoint endx="2145" endy="593" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="OR4SxRRJWlZv" linecolor="none" totalcounta="2" xmi.id="QYhlQcNULKB6" widgetbid="3wrR9vG5HXHo" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2148" starty="684" />
           <endpoint endx="2148" endy="593" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="4" widgetaid="NBNzfBt9Lyz0" linecolor="none" totalcounta="2" xmi.id="m3v5L4BTX7WM" widgetbid="3wrR9vG5HXHo" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2319" starty="685" />
           <endpoint endx="2299" endy="593" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="5" widgetaid="6RAZ26BQXDtS" linecolor="none" totalcounta="2" xmi.id="16zXDTtiFI6M" widgetbid="3wrR9vG5HXHo" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2517" starty="686" />
           <endpoint endx="2299" endy="593" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="MUWqJEahCdIv" linecolor="none" totalcounta="2" xmi.id="cUxfR6zvcqCq" widgetbid="hJKzGhjDeJFT" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2459" starty="223" />
           <endpoint endx="1947" endy="139" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="U95NLxpwAx5e" linecolor="none" totalcounta="2" xmi.id="Ox91nLpADqBN" widgetbid="hJKzGhjDeJFT" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2709" starty="218" />
           <endpoint endx="1947" endy="139" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="ROdeEp21W0qp" linecolor="none" totalcounta="2" xmi.id="x4hfbG7T9sBK" widgetbid="U95NLxpwAx5e" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2709" starty="299" />
           <endpoint endx="2709" endy="251" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="U6W9swSq6lon" linecolor="none" totalcounta="2" xmi.id="2dJGWV80w6wV" widgetbid="WUh3YNFHtj4I" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2256" starty="419" />
           <endpoint endx="2279" endy="370" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="yFUx992ig7qV" linecolor="none" totalcounta="2" xmi.id="Oh2uvQvnQMIO" widgetbid="zAWEYEN1s0SX" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="198" starty="383" />
           <endpoint endx="198" endy="345" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="zAWEYEN1s0SX" linecolor="none" totalcounta="2" xmi.id="wmRM8jihTzPM" widgetbid="zwh7ZZ49qsor" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="264" starty="295" />
           <endpoint endx="264" endy="241" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="OsrBjOrGsHAf" linecolor="none" totalcounta="2" xmi.id="BRUeT4hytTkD" widgetbid="zAWEYEN1s0SX" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="217" starty="427" />
           <endpoint endx="217" endy="345" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="npB2tgdJU4c3" linecolor="none" totalcounta="2" xmi.id="Ajy3AiH83AUt" widgetbid="zAWEYEN1s0SX" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="337" starty="474" />
           <endpoint endx="337" endy="345" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="4" widgetaid="UrloMXdiNUt6" linecolor="none" totalcounta="2" xmi.id="eWDfggXeZ39D" widgetbid="zAWEYEN1s0SX" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="365" starty="515" />
           <endpoint endx="365" endy="345" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="f7G1rhTsLawQ" linecolor="none" totalcounta="3" xmi.id="Px90G4LPhLsk" widgetbid="KCoreTfgzLbR" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1878" starty="338" />
           <endpoint endx="1544" endy="181" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="OM9K2aXZCevL" linecolor="none" totalcounta="2" xmi.id="PO2bd1g7wJXh" widgetbid="AlkLO8F1ENsy" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1303" starty="856" />
           <endpoint endx="1491" endy="647" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="AlkLO8F1ENsy" linecolor="none" totalcounta="2" xmi.id="xyQrGvXlmAvF" widgetbid="3g0SeYM2QLXn" totalcountb="2" type="510" linewidth="none" >
          <linepath>
           <startpoint startx="1491" starty="614" />
           <endpoint endx="1202" endy="558" />
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="1346" showstereotype="1" y="586" text="m_comment" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="703" width="75" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="0hxYDhGhGKnD" height="21" />
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="1484" showstereotype="1" y="590" text="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="701" width="15" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="88vTzpYRwquY" height="21" />
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="1194" showstereotype="1" y="561" text="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="702" width="15" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="pCuzlqOjVLHi" height="21" />
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="eIS4WxEeax3z" linecolor="none" totalcounta="2" xmi.id="1pQezVbgzhgP" widgetbid="OM9K2aXZCevL" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="987" starty="915" />
           <endpoint endx="1188" endy="889" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="Iu53SfgdXlut" linecolor="none" totalcounta="2" xmi.id="bLa7ZlxUucTi" widgetbid="eIS4WxEeax3z" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="778" starty="977" />
           <endpoint endx="891" endy="948" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="jLvKjwr5hcTJ" linecolor="none" totalcounta="2" xmi.id="HsbsMIiH4f8o" widgetbid="eIS4WxEeax3z" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="795" starty="1017" />
           <endpoint endx="891" endy="948" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="qTrW45AMzFPQ" linecolor="none" totalcounta="2" xmi.id="azmecuQos1Dw" widgetbid="eIS4WxEeax3z" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="918" starty="1020" />
           <endpoint endx="918" endy="948" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="u53RovKYEDqv" linecolor="none" totalcounta="2" xmi.id="FPR5Of0hVtR8" widgetbid="eIS4WxEeax3z" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="987" starty="1019" />
           <endpoint endx="987" endy="948" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="4" widgetaid="9f1qIU76vyaz" linecolor="none" totalcounta="2" xmi.id="ftcAk1G5C5iy" widgetbid="eIS4WxEeax3z" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1070" starty="1016" />
           <endpoint endx="987" endy="948" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="2" widgetaid="KCoreTfgzLbR" linecolor="none" totalcounta="5" xmi.id="0SkJJATCLRmc" widgetbid="f7G1rhTsLawQ" totalcountb="3" type="510" linewidth="none" >
          <linepath>
           <startpoint startx="1544" starty="181" />
           <endpoint endx="1878" endy="338" />
           <point x="1552" y="294" />
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="1548" showstereotype="1" y="237" text="m_pCodeDoc" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="703" width="84" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="0YQGsBRyILPH" height="21" />
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="1527" showstereotype="1" y="183" text="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="701" width="15" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="8xh5nZdblXYU" height="21" />
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="1871" showstereotype="1" y="316" text="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="702" width="15" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="MwErFTaE1ySr" height="21" />
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="KCoreTfgzLbR" linecolor="none" totalcounta="4" xmi.id="BPcdkkvf9ZHx" widgetbid="8ABALi12YGmn" totalcountb="3" type="510" linewidth="none" >
          <linepath>
           <startpoint startx="1072" starty="181" />
           <endpoint endx="983" endy="238" />
          </linepath>
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="1027" showstereotype="1" y="209" text="m_textblockVector" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="703" width="108" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="7upPDEfL9MQv" height="21" />
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="1068" showstereotype="1" y="184" text="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="701" width="15" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="v4WfZ27vwJlB" height="21" />
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="973" showstereotype="1" y="214" text="*" font="Sans Serif,10,-1,5,50,0,0,0,0,0" pretext="" role="702" width="13" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="nJNoHqgMiTkv" height="21" />
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="4M0YMb7hwr92" linecolor="none" totalcounta="3" xmi.id="ZoZT0lTU0iOc" widgetbid="AlkLO8F1ENsy" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1926" starty="760" />
           <endpoint endx="1652" endy="647" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="1" widgetaid="4M0YMb7hwr92" linecolor="none" totalcounta="3" xmi.id="sZlsG9ShnJPI" widgetbid="KCoreTfgzLbR" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1926" starty="760" />
           <endpoint endx="1544" endy="181" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="OM9K2aXZCevL" linecolor="none" totalcounta="2" xmi.id="eROQkni5BZmZ" widgetbid="Ij239LgPp8Hc" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1303" starty="856" />
           <endpoint endx="1682" endy="787" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="ogqxDbXgm7Fg" linecolor="none" totalcounta="2" xmi.id="G3pXfV3Ath8o" widgetbid="4M0YMb7hwr92" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2114" starty="838" />
           <endpoint endx="2076" endy="793" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="ogqxDbXgm7Fg" linecolor="none" totalcounta="2" xmi.id="Gzv9g1x0mMKa" widgetbid="Ij239LgPp8Hc" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2114" starty="838" />
           <endpoint endx="1794" endy="787" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="lvSR6OAGl0B4" linecolor="none" totalcounta="2" xmi.id="bMK7gGbvAuXN" widgetbid="OM9K2aXZCevL" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1404" starty="1005" />
           <endpoint endx="1303" endy="889" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="W9KM3A2gK3yw" linecolor="none" totalcounta="2" xmi.id="iKYLj8uFHCbL" widgetbid="lvSR6OAGl0B4" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1362" starty="1106" />
           <endpoint endx="1404" endy="1038" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="PEOFL23VhXQB" linecolor="none" totalcounta="2" xmi.id="TkeivF1Gq0tV" widgetbid="lvSR6OAGl0B4" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1394" starty="1150" />
           <endpoint endx="1404" endy="1038" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="cCtfvPQxlaRq" linecolor="none" totalcounta="2" xmi.id="SJ3BuU2J9sl0" widgetbid="lvSR6OAGl0B4" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1535" starty="1143" />
           <endpoint endx="1535" endy="1038" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="4" widgetaid="ResUt6N6FjJr" linecolor="none" totalcounta="2" xmi.id="eb9lStlRzpdp" widgetbid="lvSR6OAGl0B4" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1565" starty="1142" />
           <endpoint endx="1542" endy="1038" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="5" widgetaid="cdmLc2CEC5t8" linecolor="none" totalcounta="2" xmi.id="zhKyUwneb0l4" widgetbid="lvSR6OAGl0B4" totalcountb="6" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1739" starty="1141" />
           <endpoint endx="1542" endy="1038" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="XcUrOBmtxmKw" linecolor="none" totalcounta="3" xmi.id="Nf5oET1x5m8r" widgetbid="AlkLO8F1ENsy" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1753" starty="928" />
           <endpoint endx="1652" endy="647" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="1" widgetaid="XcUrOBmtxmKw" linecolor="none" totalcounta="3" xmi.id="VEGZ0MQR31EF" widgetbid="Ij239LgPp8Hc" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1790" starty="928" />
           <endpoint endx="1790" endy="787" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="OJJ1HVZly9bb" linecolor="none" totalcounta="2" xmi.id="Uo3Vy9UKSnLh" widgetbid="XcUrOBmtxmKw" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1753" starty="991" />
           <endpoint endx="1753" endy="961" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="kTfHorqKJu52" linecolor="none" totalcounta="2" xmi.id="oCjEx3tBwJQu" widgetbid="XcUrOBmtxmKw" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1809" starty="1034" />
           <endpoint endx="1809" endy="961" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="lhR0LFgyIeSw" linecolor="none" totalcounta="2" xmi.id="XaNTr2vnJbxo" widgetbid="XcUrOBmtxmKw" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1974" starty="1033" />
           <endpoint endx="1952" endy="961" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="4" widgetaid="CX4wTB2ARs4d" linecolor="none" totalcounta="2" xmi.id="g4nzgknKe37Y" widgetbid="XcUrOBmtxmKw" totalcountb="5" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2191" starty="1032" />
           <endpoint endx="1952" endy="961" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="lysPzzxQLIHW" linecolor="none" totalcounta="2" xmi.id="6TYvrCxs6g4e" widgetbid="XcUrOBmtxmKw" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2437" starty="1029" />
           <endpoint endx="1952" endy="961" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="SHu6nDwDWxEZ" linecolor="none" totalcounta="2" xmi.id="x82uzSH96wnq" widgetbid="ogqxDbXgm7Fg" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2140" starty="901" />
           <endpoint endx="2140" endy="871" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="om0wYqKDlU2d" linecolor="none" totalcounta="2" xmi.id="mDDPrpWK2sem" widgetbid="ogqxDbXgm7Fg" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2221" starty="902" />
           <endpoint endx="2221" endy="871" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="UK8CHmsdfe6T" linecolor="none" totalcounta="2" xmi.id="TMYTDAFCrkH9" widgetbid="ogqxDbXgm7Fg" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2389" starty="902" />
           <endpoint endx="2296" endy="871" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="B4k5dbNoMrqx" linecolor="none" totalcounta="2" xmi.id="g81VtGfjxs2s" widgetbid="ogqxDbXgm7Fg" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2575" starty="903" />
           <endpoint endx="2296" endy="871" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="fCdVDTUs9mun" linecolor="none" totalcounta="2" xmi.id="hmD6kX1QT4fv" widgetbid="WUh3YNFHtj4I" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2302" starty="419" />
           <endpoint endx="2302" endy="370" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="2Orhhvd0SErt" linecolor="none" totalcounta="2" xmi.id="cJU6LAzfXn8k" widgetbid="WUh3YNFHtj4I" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2388" starty="419" />
           <endpoint endx="2379" endy="370" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="bLR0Lugy5HSI" linecolor="none" totalcounta="2" xmi.id="n00In830jdMB" widgetbid="WUh3YNFHtj4I" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2524" starty="418" />
           <endpoint endx="2379" endy="370" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="rfoPnMdBM4KY" linecolor="none" totalcounta="2" xmi.id="IEbbdtXrqESY" widgetbid="U95NLxpwAx5e" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2728" starty="299" />
           <endpoint endx="2728" endy="251" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="sc9L4fq9Cd3i" linecolor="none" totalcounta="2" xmi.id="0q4DIdVw3Asg" widgetbid="U95NLxpwAx5e" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="2884" starty="300" />
           <endpoint endx="2826" endy="251" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="QD1JRKvGxjdk" linecolor="none" totalcounta="2" xmi.id="Bi8Cq0tbsz1E" widgetbid="U95NLxpwAx5e" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="3062" starty="299" />
           <endpoint endx="2826" endy="251" />
          </linepath>
         </assocwidget>
        </associations>
       </diagram>
       <diagram showopsig="1" linecolor="#ff0000" snapx="10" showattribassocs="1" snapy="10" linewidth="0" showattsig="1" showpackage="1" showstereotype="1" name="Code Generation Overview" font="Sans Serif,10,-1,0,50,0,0,0,0,0" canvasheight="846" canvaswidth="1278" localid="" snapcsgrid="0" showgrid="0" showops="1" usefillcolor="1" fillcolor="#ffff00" zoom="100" xmi.id="JBFSUyhmy1cS" documentation="" showscope="1" snapgrid="0" showatts="1" type="1" >
        <widgets>
         <notewidget width="258" showstereotype="1" x="24" noteType="0" y="29" usesdiagramusefillcolor="1" usesdiagramfillcolor="0" isinstance="0" fillcolor="#dcdcdc" height="92" linecolor="#000000" xmi.id="ty3eUhci7U5k" usefillcolor="1" linewidth="none" font="Sans Serif,10,-1,0,50,0,0,0,0,0" text="Code generation hierarchy.&#xa;Diagram by Andi Fischer, 2008-07-27." />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="573" showattsigs="601" showstereotype="1" y="86" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="65" isinstance="0" usefillcolor="1" fillcolor="#c0ffff" xmi.id="hJKzGhjDeJFT" showscope="1" height="50" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="564" showattsigs="601" showstereotype="1" y="215" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="98" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="iHrU5UEEhxRE" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="543" showattsigs="601" showstereotype="1" y="366" showattributes="1" font="Sans Serif,10,-1,0,75,0,0,0,0,0" width="137" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="qwX6tWnlosv4" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="246" showattsigs="601" showstereotype="1" y="297" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="121" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="RioDFKLz4fWH" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="400" showattsigs="601" showstereotype="1" y="299" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="126" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="4VLLyWYyPSiB" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="688" showattsigs="601" showstereotype="1" y="301" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="107" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="HYSgCYAbHzpW" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="827" showattsigs="601" showstereotype="1" y="300" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="128" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="HATJp0asTwDR" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="34" showattsigs="601" showstereotype="1" y="461" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="68" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="0devhnagACPi" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="123" showattsigs="601" showstereotype="1" y="463" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="62" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="uLsaI6CnTPN2" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="204" showattsigs="601" showstereotype="1" y="464" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="88" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="RDkegKrevVac" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="315" showattsigs="601" showstereotype="1" y="462" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="64" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="G8IRKg7E1zmJ" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="401" showattsigs="601" showstereotype="1" y="461" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="60" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="3x4UMRWlfENJ" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="477" showattsigs="601" showstereotype="1" y="462" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="84" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="dqGK9eBp3YOQ" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="677" showattsigs="601" showstereotype="1" y="466" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="68" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="Kv9Vwhm7by3n" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="755" showattsigs="601" showstereotype="1" y="467" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="74" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="V0DXuc8itQqV" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="845" showattsigs="601" showstereotype="1" y="470" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="67" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="bfZ83zaMshro" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="925" showattsigs="601" showstereotype="1" y="472" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="69" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="MbwwZzj5xuap" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1005" showattsigs="601" showstereotype="1" y="472" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="62" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="XgYQ4Otf3Sl5" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="1080" showattsigs="601" showstereotype="1" y="472" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="114" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="y1Svv2jQgHok" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="868" showattsigs="601" showstereotype="1" y="563" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="86" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="jwOkOs8vBX0r" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="none" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="0" showpackage="1" x="966" showattsigs="601" showstereotype="1" y="563" showattributes="1" font="Sans Serif,10,-1,0,50,0,0,0,0,0" width="114" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="gFn876THVHL7" showscope="1" height="33" showopsigs="601" />
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="422" showattsigs="601" showstereotype="1" y="624" showattributes="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" width="73" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="X8g6MIwM07CF" showscope="1" height="50" showopsigs="601" />
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="513" showattsigs="601" showstereotype="1" y="623" showattributes="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" width="73" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="qcxB0qcl2zrA" showscope="1" height="50" showopsigs="601" />
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="601" showattsigs="601" showstereotype="1" y="624" showattributes="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" width="73" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="P8ZiiFaD2O39" showscope="1" height="50" showopsigs="601" />
         <classwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" showoperations="1" usesdiagramusefillcolor="0" showpubliconly="0" showpackage="1" x="688" showattsigs="601" showstereotype="1" y="624" showattributes="1" font="Sans Serif,10,-1,5,50,0,0,0,0,0" width="75" isinstance="0" usefillcolor="1" fillcolor="#c0ffc0" xmi.id="VF23HLo5vlEw" showscope="1" height="50" showopsigs="601" />
        </widgets>
        <messages/>
        <associations>
         <assocwidget indexa="1" indexb="1" widgetaid="iHrU5UEEhxRE" linecolor="none" totalcounta="2" xmi.id="Zhicxx5km1Qd" widgetbid="hJKzGhjDeJFT" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="621" starty="215" />
           <endpoint endx="621" endy="136" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="qwX6tWnlosv4" linecolor="none" totalcounta="2" xmi.id="Wbqs8ocKmYV7" widgetbid="iHrU5UEEhxRE" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="592" starty="366" />
           <endpoint endx="592" endy="248" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="RioDFKLz4fWH" linecolor="none" totalcounta="2" xmi.id="QjNpB5yTbR7m" widgetbid="iHrU5UEEhxRE" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="367" starty="297" />
           <endpoint endx="564" endy="248" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="4VLLyWYyPSiB" linecolor="none" totalcounta="2" xmi.id="TTV3sappsC26" widgetbid="iHrU5UEEhxRE" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="526" starty="299" />
           <endpoint endx="564" endy="248" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="HYSgCYAbHzpW" linecolor="none" totalcounta="2" xmi.id="yNIoYKtt3TYx" widgetbid="iHrU5UEEhxRE" totalcountb="4" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="688" starty="301" />
           <endpoint endx="662" endy="248" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="HATJp0asTwDR" linecolor="none" totalcounta="2" xmi.id="2l85Eg012yYA" widgetbid="iHrU5UEEhxRE" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="827" starty="300" />
           <endpoint endx="662" endy="248" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="0devhnagACPi" linecolor="none" totalcounta="2" xmi.id="0SAzRxISsNxC" widgetbid="qwX6tWnlosv4" totalcountb="3" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="102" starty="461" />
           <endpoint endx="543" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="uLsaI6CnTPN2" linecolor="none" totalcounta="2" xmi.id="sDmiajuM8rmo" widgetbid="qwX6tWnlosv4" totalcountb="3" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="185" starty="463" />
           <endpoint endx="543" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="RDkegKrevVac" linecolor="none" totalcounta="2" xmi.id="8L8GAu3IN0vX" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="292" starty="464" />
           <endpoint endx="543" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="G8IRKg7E1zmJ" linecolor="none" totalcounta="2" xmi.id="8rgTrZ0QIsCx" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="379" starty="462" />
           <endpoint endx="543" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="3" widgetaid="3x4UMRWlfENJ" linecolor="none" totalcounta="2" xmi.id="kLM2BWx4bwpj" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="461" starty="461" />
           <endpoint endx="543" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="4" widgetaid="dqGK9eBp3YOQ" linecolor="none" totalcounta="2" xmi.id="iNe89jYS8oRM" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="552" starty="462" />
           <endpoint endx="552" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="9" widgetaid="Kv9Vwhm7by3n" linecolor="none" totalcounta="2" xmi.id="jWOqKpAFcM6f" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="679" starty="466" />
           <endpoint endx="679" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="10" widgetaid="V0DXuc8itQqV" linecolor="none" totalcounta="2" xmi.id="3x3dH9IB6x7m" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="755" starty="467" />
           <endpoint endx="680" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="11" widgetaid="bfZ83zaMshro" linecolor="none" totalcounta="2" xmi.id="AjPFgU1CbwiL" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="845" starty="470" />
           <endpoint endx="680" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="12" widgetaid="MbwwZzj5xuap" linecolor="none" totalcounta="2" xmi.id="X146xmRh9dX7" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="925" starty="472" />
           <endpoint endx="680" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="13" widgetaid="XgYQ4Otf3Sl5" linecolor="none" totalcounta="2" xmi.id="sjAzKg4tMmtP" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1005" starty="472" />
           <endpoint endx="680" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="y1Svv2jQgHok" linecolor="none" totalcounta="2" xmi.id="OiK29zHVW1RU" widgetbid="qwX6tWnlosv4" totalcountb="2" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="1080" starty="472" />
           <endpoint endx="680" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="jwOkOs8vBX0r" linecolor="none" totalcounta="2" xmi.id="unPoFqgxm5h8" widgetbid="MbwwZzj5xuap" totalcountb="3" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="925" starty="563" />
           <endpoint endx="925" endy="505" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="gFn876THVHL7" linecolor="none" totalcounta="2" xmi.id="fBrPGZYBKZId" widgetbid="MbwwZzj5xuap" totalcountb="3" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="986" starty="563" />
           <endpoint endx="986" endy="505" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="5" widgetaid="X8g6MIwM07CF" linecolor="none" totalcounta="2" xmi.id="nSrTCpIFMQvT" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="495" starty="624" />
           <endpoint endx="543" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="6" widgetaid="qcxB0qcl2zrA" linecolor="none" totalcounta="2" xmi.id="WQZWoaeKpeN4" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="552" starty="623" />
           <endpoint endx="552" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="7" widgetaid="P8ZiiFaD2O39" linecolor="none" totalcounta="2" xmi.id="AhUyLs0Iz8Bs" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="601" starty="624" />
           <endpoint endx="601" endy="399" />
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="8" widgetaid="VF23HLo5vlEw" linecolor="none" totalcounta="2" xmi.id="Wz3V5FOYFhCk" widgetbid="qwX6tWnlosv4" totalcountb="14" type="500" linewidth="none" >
          <linepath>
           <startpoint startx="688" starty="624" />
           <endpoint endx="680" endy="399" />
          </linepath>
         </assocwidget>
        </associations>
       </diagram>
      </diagrams>
     </XMI.extension>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Use Case View" name="Use Case View" >
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Component View" name="Component View" >
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Deployment View" name="Deployment View" >
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Entity Relationship Model" name="Entity Relationship Model" >
     <UML:Namespace.ownedElement/>
    </UML:Model>
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello" >
  <docsettings viewid="DgXxnJdKD0II" uniqueid="PoOhnLP1aPev" documentation="" />
  <listview>
   <listitem open="1" type="800" label="Views" >
    <listitem open="1" type="801" id="Logical View" >
     <listitem open="0" type="807" id="JBFSUyhmy1cS" label="Code Generation Overview" />
     <listitem open="0" type="807" id="DgXxnJdKD0II" label="CodeGenerator" />
     <listitem open="1" type="813" id="uLsaI6CnTPN2" />
     <listitem open="1" type="813" id="0devhnagACPi" />
     <listitem open="1" type="813" id="U6W9swSq6lon" />
     <listitem open="1" type="813" id="xEi5TDIkcYs7" />
     <listitem open="1" type="813" id="g4EvylKsG4dz" />
     <listitem open="1" type="813" id="ROdeEp21W0qp" />
     <listitem open="1" type="813" id="yFUx992ig7qV" />
     <listitem open="1" type="813" id="SHu6nDwDWxEZ" />
     <listitem open="1" type="813" id="W9KM3A2gK3yw" />
     <listitem open="1" type="813" id="OJJ1HVZly9bb" />
     <listitem open="1" type="813" id="O5KIPdcScWqw" />
     <listitem open="1" type="813" id="Iu53SfgdXlut" />
     <listitem open="1" type="813" id="PEOFL23VhXQB" />
     <listitem open="1" type="813" id="kTfHorqKJu52" />
     <listitem open="1" type="813" id="TA5se9TCTbye" />
     <listitem open="1" type="813" id="jLvKjwr5hcTJ" />
     <listitem open="1" type="813" id="RDkegKrevVac" />
     <listitem open="1" type="813" id="3wrR9vG5HXHo" />
     <listitem open="1" type="813" id="lvSR6OAGl0B4" />
     <listitem open="0" type="813" id="wCmtTUdaJUas" >
      <listitem open="0" type="814" id="PoOhnLP1aPev" />
      <listitem open="0" type="815" id="hslVjat5u4kJ" />
      <listitem open="0" type="815" id="Z5JR91iAki90" />
      <listitem open="0" type="815" id="iob7B8P7teyt" />
      <listitem open="0" type="815" id="Eo3yWCwDyXK9" />
      <listitem open="0" type="815" id="iF5VUBNixQfR" />
      <listitem open="0" type="815" id="1KEfCUbF66ei" />
      <listitem open="0" type="815" id="0Bu6FYpA2n5O" />
      <listitem open="0" type="815" id="Zi21EbgEkbK0" />
      <listitem open="0" type="815" id="dhJm3hpaNrcb" />
      <listitem open="0" type="815" id="qCkB2MlTdYcU" />
      <listitem open="0" type="815" id="2JtBSGLGQ5PS" />
     </listitem>
     <listitem open="1" type="813" id="AlkLO8F1ENsy" />
     <listitem open="1" type="813" id="WUh3YNFHtj4I" />
     <listitem open="1" type="813" id="XcUrOBmtxmKw" />
     <listitem open="0" type="813" id="3g0SeYM2QLXn" >
      <listitem open="0" type="815" id="0h3th0whzeVR" />
      <listitem open="0" type="815" id="zfe3H38hpWwx" />
      <listitem open="0" type="815" id="J3AXJt2x400i" />
     </listitem>
     <listitem open="0" type="813" id="f7G1rhTsLawQ" >
      <listitem open="0" type="815" id="vsgTVdpYyyL1" />
      <listitem open="0" type="815" id="ViITedVGC0Um" />
      <listitem open="0" type="815" id="qYJeUQU1ngR3" />
      <listitem open="0" type="815" id="BBSjT4BrYCeE" />
      <listitem open="0" type="815" id="oucIZIJSBJoo" />
      <listitem open="0" type="815" id="odrhTW5NPIqQ" />
      <listitem open="0" type="815" id="PKQ6ExpJtDtp" />
      <listitem open="0" type="815" id="CxuJvYwvbwAS" />
      <listitem open="0" type="815" id="4CF17WufQnEM" />
     </listitem>
     <listitem open="1" type="813" id="KCoreTfgzLbR" >
      <listitem open="0" type="814" id="x4pHgUko8Lze" />
      <listitem open="0" type="815" id="wE8vEthGr4Qv" />
      <listitem open="0" type="815" id="wtnbT6sEs6nZ" />
      <listitem open="0" type="815" id="IFrMXPEKRSZM" />
      <listitem open="0" type="815" id="cqmLcuPdEnBy" />
     </listitem>
     <listitem open="1" type="813" id="U95NLxpwAx5e" />
     <listitem open="1" type="813" id="MUWqJEahCdIv" />
     <listitem open="1" type="813" id="zAWEYEN1s0SX" />
     <listitem open="1" type="813" id="iHrU5UEEhxRE" />
     <listitem open="1" type="813" id="OM9K2aXZCevL" />
     <listitem open="1" type="813" id="eIS4WxEeax3z" />
     <listitem open="1" type="813" id="bN5OIiOpQHhf" />
     <listitem open="1" type="813" id="RioDFKLz4fWH" />
     <listitem open="1" type="813" id="X8g6MIwM07CF" />
     <listitem open="1" type="813" id="om0wYqKDlU2d" />
     <listitem open="1" type="813" id="OR4SxRRJWlZv" />
     <listitem open="1" type="813" id="cCtfvPQxlaRq" />
     <listitem open="1" type="813" id="fCdVDTUs9mun" />
     <listitem open="1" type="813" id="lhR0LFgyIeSw" />
     <listitem open="1" type="813" id="P1pD0gRXLqvX" />
     <listitem open="1" type="813" id="rfoPnMdBM4KY" />
     <listitem open="1" type="813" id="OsrBjOrGsHAf" />
     <listitem open="1" type="813" id="HYSgCYAbHzpW" />
     <listitem open="1" type="813" id="qTrW45AMzFPQ" />
     <listitem open="1" type="813" id="qcxB0qcl2zrA" />
     <listitem open="1" type="813" id="4M0YMb7hwr92" />
     <listitem open="1" type="813" id="G8IRKg7E1zmJ" />
     <listitem open="1" type="813" id="3x4UMRWlfENJ" />
     <listitem open="1" type="813" id="UK8CHmsdfe6T" />
     <listitem open="1" type="813" id="NBNzfBt9Lyz0" />
     <listitem open="1" type="813" id="ResUt6N6FjJr" />
     <listitem open="1" type="813" id="2Orhhvd0SErt" />
     <listitem open="1" type="813" id="CX4wTB2ARs4d" />
     <listitem open="1" type="813" id="LfB1jPuh9DXP" />
     <listitem open="1" type="813" id="sc9L4fq9Cd3i" />
     <listitem open="1" type="813" id="npB2tgdJU4c3" />
     <listitem open="1" type="813" id="4VLLyWYyPSiB" />
     <listitem open="1" type="813" id="u53RovKYEDqv" />
     <listitem open="1" type="813" id="P8ZiiFaD2O39" />
     <listitem open="1" type="813" id="jwOkOs8vBX0r" />
     <listitem open="1" type="813" id="Ij239LgPp8Hc" />
     <listitem open="1" type="813" id="ogqxDbXgm7Fg" />
     <listitem open="1" type="813" id="dqGK9eBp3YOQ" />
     <listitem open="1" type="813" id="Kv9Vwhm7by3n" />
     <listitem open="1" type="813" id="V0DXuc8itQqV" />
     <listitem open="1" type="813" id="bfZ83zaMshro" />
     <listitem open="1" type="813" id="gFn876THVHL7" />
     <listitem open="1" type="813" id="WRUoOYRGE0Zn" />
     <listitem open="1" type="813" id="OGGjVgBz5goR" />
     <listitem open="1" type="813" id="d2p7tg7NMtAb" />
     <listitem open="1" type="813" id="hJKzGhjDeJFT" />
     <listitem open="1" type="813" id="MwFfYBQ2FgYa" />
     <listitem open="0" type="813" id="5jQ58fhxUjWi" />
     <listitem open="1" type="813" id="zwh7ZZ49qsor" />
     <listitem open="1" type="813" id="B4k5dbNoMrqx" />
     <listitem open="1" type="813" id="6RAZ26BQXDtS" />
     <listitem open="1" type="813" id="cdmLc2CEC5t8" />
     <listitem open="1" type="813" id="bLR0Lugy5HSI" />
     <listitem open="1" type="813" id="lysPzzxQLIHW" />
     <listitem open="1" type="813" id="F9M7Xe1wgq8g" />
     <listitem open="1" type="813" id="QD1JRKvGxjdk" />
     <listitem open="1" type="813" id="UrloMXdiNUt6" />
     <listitem open="1" type="813" id="HATJp0asTwDR" />
     <listitem open="1" type="813" id="9f1qIU76vyaz" />
     <listitem open="1" type="813" id="VF23HLo5vlEw" />
     <listitem open="1" type="813" id="MbwwZzj5xuap" />
     <listitem open="1" type="813" id="qwX6tWnlosv4" />
     <listitem open="1" type="813" id="XgYQ4Otf3Sl5" />
     <listitem open="0" type="813" id="8ABALi12YGmn" >
      <listitem open="0" type="814" id="z7Zd6YnAa4bu" />
      <listitem open="0" type="814" id="IN3iCLmKqg4a" />
      <listitem open="0" type="814" id="B7IFg5OG7x8U" />
      <listitem open="0" type="814" id="6gOayjeewxQG" />
      <listitem open="0" type="814" id="n6IMkRT0g744" />
      <listitem open="0" type="814" id="LB1UgLim16Ly" />
      <listitem open="0" type="815" id="aKFz1islnjuY" />
      <listitem open="0" type="815" id="kd3IlRdigGEq" />
      <listitem open="0" type="815" id="qFFxzsyGbPrH" />
      <listitem open="0" type="815" id="UstjE74Oi74Q" />
      <listitem open="0" type="815" id="7pSSqjfS0NL2" />
      <listitem open="0" type="815" id="J9dp9A5o8MqP" />
      <listitem open="0" type="815" id="dfNwl9ShPOOh" />
      <listitem open="0" type="815" id="tMN0gBPJqlDc" />
      <listitem open="0" type="815" id="Broq8JV3mRbv" />
      <listitem open="0" type="815" id="GvpV5h6GYv6e" />
      <listitem open="0" type="815" id="dfNwFtDVm00r" />
      <listitem open="0" type="815" id="pvX3s6pTlCQy" />
      <listitem open="0" type="815" id="uLbdtfMhbrkR" />
      <listitem open="0" type="815" id="WBm0uGRpb1QT" />
      <listitem open="0" type="815" id="vpppvNJPY6PT" />
      <listitem open="0" type="815" id="y3pV9FwT4APu" />
      <listitem open="0" type="815" id="O3btcLJZP94Y" />
      <listitem open="0" type="815" id="rFrSu66I7gAj" />
      <listitem open="0" type="815" id="6iJueM1s6EeM" />
      <listitem open="0" type="815" id="CzvuyUGV4KAU" />
      <listitem open="0" type="815" id="h2zOUwqhvmZr" />
      <listitem open="0" type="815" id="hvTbeAPjN0ZQ" />
      <listitem open="0" type="815" id="bBSn9SdBJO3K" />
      <listitem open="0" type="815" id="ekDohddoLmxL" />
      <listitem open="0" type="815" id="coAI27TfreTZ" />
      <listitem open="0" type="815" id="8qjXrBKT0Uj0" />
      <listitem open="0" type="815" id="bWvmokwuYgPP" />
      <listitem open="0" type="815" id="7iPfOp4EXu3l" />
      <listitem open="0" type="815" id="anLKC7pHpDwC" />
      <listitem open="0" type="815" id="UIFMfYdFLwXV" />
      <listitem open="0" type="815" id="oJo35KZYamuF" />
      <listitem open="0" type="815" id="JVScQ06RLqEr" />
      <listitem open="0" type="815" id="umYDcm472RFc" />
      <listitem open="0" type="815" id="vgKec0kUkIhK" />
     </listitem>
     <listitem open="1" type="813" id="NHEMZRBuya6J" />
     <listitem open="1" type="813" id="FPiPtJrSCuDy" />
     <listitem open="1" type="813" id="vshOusFS3rfc" />
     <listitem open="1" type="813" id="y1Svv2jQgHok" />
     <listitem open="0" type="830" id="Datatypes" >
      <listitem open="0" type="829" id="rf2HpDpVQn5w" />
      <listitem open="0" type="829" id="Kr387OdW8qKs" />
      <listitem open="0" type="829" id="8jB92Tz5c4RD" />
      <listitem open="1" type="829" id="VKULHW8WCaH0" />
      <listitem open="0" type="829" id="BrdhYqvTUF57" />
      <listitem open="1" type="829" id="hTAgcBW3sQHE" />
      <listitem open="1" type="829" id="GkfQZGlDo5M5" />
      <listitem open="1" type="829" id="v1KvKb4vz5jr" />
      <listitem open="0" type="829" id="bCXrl17nI0wk" />
      <listitem open="0" type="829" id="abeY7wglduGy" />
      <listitem open="0" type="829" id="f0G2JJryL6nW" />
      <listitem open="0" type="829" id="Lu4pbaWmS9R0" />
      <listitem open="1" type="829" id="9sv6ycxCKacr" />
      <listitem open="1" type="829" id="MhzAzgGuhYo1" />
      <listitem open="1" type="829" id="gaK9HHMvoIj7" />
      <listitem open="1" type="829" id="MA03im3qewwc" />
      <listitem open="1" type="829" id="pL5dRRhl6gu5" />
      <listitem open="1" type="829" id="Wg0FStPdRJwf" />
      <listitem open="0" type="829" id="Tn6xvJF81TH8" />
      <listitem open="1" type="829" id="YsnrSPiHlntA" />
      <listitem open="1" type="829" id="7eUlaQM7I9yl" />
      <listitem open="1" type="829" id="DavJEpNaxLbg" />
     </listitem>
     <listitem open="0" type="831" id="bHKk9p7sa8bG" >
      <listitem open="0" type="839" id="k0v2k3rpvPwU" />
      <listitem open="0" type="839" id="ZOiD7h89RBzF" />
      <listitem open="0" type="839" id="jjn4IAlVHSbO" />
      <listitem open="0" type="839" id="pWvFx32gknj2" />
      <listitem open="0" type="839" id="nAgUvUDvPfRa" />
     </listitem>
     <listitem open="0" type="831" id="LjMHz4qXEwuX" >
      <listitem open="0" type="839" id="e8vLWzPmWS6r" />
      <listitem open="0" type="839" id="ovd0ZktsGsH0" />
     </listitem>
    </listitem>
    <listitem open="1" type="802" id="Use Case View" />
    <listitem open="1" type="821" id="Component View" />
    <listitem open="1" type="827" id="Deployment View" />
    <listitem open="1" type="836" id="Entity Relationship Model" />
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="C++" >
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="hJKzGhjDeJFT" id="hJKzGhjDeJFT" fileName="QObject" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qobject.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="8ABALi12YGmn" id="8ABALi12YGmn" fileName="TextBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;textblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation tag="operation_7pSSqjfS0NL2" parent_id="7pSSqjfS0NL2" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Constructor." />
         </header>
        </codeoperation>
        <codeoperation tag="operation_J9dp9A5o8MqP" parent_id="J9dp9A5o8MqP" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Destructor." />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation tag="operation_aKFz1islnjuY" parent_id="aKFz1islnjuY" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_kd3IlRdigGEq" parent_id="kd3IlRdigGEq" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_qFFxzsyGbPrH" parent_id="qFFxzsyGbPrH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get the value of m_text&amp;#010;The actual text of this code block.&amp;#010;@return   the value of m_text" />
         </header>
        </codeoperation>
        <codeaccessormethod tag="hblock_tag_5" accessType="0" parent_id="z7Zd6YnAa4bu" writeOutText="false" classfield_id="z7Zd6YnAa4bu" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_6" accessType="1" parent_id="z7Zd6YnAa4bu" writeOutText="false" classfield_id="z7Zd6YnAa4bu" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_7" accessType="0" parent_id="IN3iCLmKqg4a" writeOutText="false" classfield_id="IN3iCLmKqg4a" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_8" accessType="1" parent_id="IN3iCLmKqg4a" writeOutText="false" classfield_id="IN3iCLmKqg4a" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_9" accessType="0" parent_id="B7IFg5OG7x8U" writeOutText="false" classfield_id="B7IFg5OG7x8U" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_10" accessType="1" parent_id="B7IFg5OG7x8U" writeOutText="false" classfield_id="B7IFg5OG7x8U" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_11" accessType="0" parent_id="6gOayjeewxQG" writeOutText="false" classfield_id="6gOayjeewxQG" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_12" accessType="1" parent_id="6gOayjeewxQG" writeOutText="false" classfield_id="6gOayjeewxQG" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_13" accessType="0" parent_id="n6IMkRT0g744" writeOutText="false" classfield_id="n6IMkRT0g744" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_14" accessType="1" parent_id="n6IMkRT0g744" writeOutText="false" classfield_id="n6IMkRT0g744" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_15" accessType="0" parent_id="LB1UgLim16Ly" writeOutText="false" classfield_id="LB1UgLim16Ly" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_16" accessType="1" parent_id="LB1UgLim16Ly" writeOutText="false" classfield_id="LB1UgLim16Ly" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_UstjE74Oi74Q" parent_id="UstjE74Oi74Q" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get the tag of this text block. This tag&amp;#010;may be used to find this text block in the code document&amp;#010;to which it belongs.&amp;#010;@return   the tag" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_dfNwl9ShPOOh" parent_id="dfNwl9ShPOOh" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the value of m_text&amp;#010;The actual text of this code block.&amp;#010;@param text   the new value of m_text" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_tMN0gBPJqlDc" parent_id="tMN0gBPJqlDc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Add text to this object.&amp;#010;@param text   the text to add" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_Broq8JV3mRbv" parent_id="Broq8JV3mRbv" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the tag of this text block. This tag&amp;#010;may be used to find this text block in the code document&amp;#010;to which it belongs.&amp;#010;@param value   the new value for the tag" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_GvpV5h6GYv6e" parent_id="GvpV5h6GYv6e" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get the value of m_parentDoc&amp;#010;@return the value of m_parentDoc" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_dfNwFtDVm00r" parent_id="dfNwFtDVm00r" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the value of m_writeOutText&amp;#010;Whether or not to include the text of this TextBlock into a file.&amp;#010;@param write   the new value of m_writeOutText" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_pvX3s6pTlCQy" parent_id="pvX3s6pTlCQy" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get the value of m_writeOutText&amp;#010;Whether or not to include the text of this TextBlock into a file.&amp;#010;@return the value of m_writeOutText" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_uLbdtfMhbrkR" parent_id="uLbdtfMhbrkR" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set how many times to indent this text block.&amp;#010;The amount of each indentation is determined from the parent&amp;#010;codedocument codegeneration policy.&amp;#010;@param level   the new value for the indentation level" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_WBm0uGRpb1QT" parent_id="WBm0uGRpb1QT" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get how many times to indent this text block.&amp;#010;The amount of each indentation is determined from the parent&amp;#010;codedocument codegeneration policy.&amp;#010;@return   the indentation level" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_vpppvNJPY6PT" parent_id="vpppvNJPY6PT" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get the actual amount of indentation for a given level of indentation.&amp;#010;@param level   the level of interest&amp;#010;@return        the indentation string" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_y3pV9FwT4APu" parent_id="y3pV9FwT4APu" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get how much a single &quot;level&quot; of indentation will actually indent.&amp;#010;@return   the unit of indentation (for one level)" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_O3btcLJZP94Y" parent_id="O3btcLJZP94Y" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get the new line chars which ends the line.&amp;#010;@return   the ending chars for new line" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_rFrSu66I7gAj" parent_id="rFrSu66I7gAj" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Format a long text string to be more readable.&amp;#010;@param text               the original text for formatting&amp;#010;@param linePrefix         a line prefix&amp;#010;@param breakStr           a break string&amp;#010;@param alwaysAddBreak     control to add always a break string&amp;#010;@param lastLineHasBreak   control to add a break string to the last line&amp;#010;@return                   the new formatted text" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_6iJueM1s6EeM" parent_id="6iJueM1s6EeM" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="UnFormat a long text string. Typically, this means removing&amp;#010;the indentation (linePrefix) and/or newline chars from each line.&amp;#010;If an indentation is not specified, then the current indentation is used.&amp;#010;@param text     the original text for unformatting&amp;#010;@param indent   the indentation&amp;#010;@return         the unformatted text" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_CzvuyUGV4KAU" parent_id="CzvuyUGV4KAU" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Return the text in the right format. Returned string is empty&amp;#010;if m_writeOutText is false.&amp;#010;@return  QString" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_h2zOUwqhvmZr" parent_id="h2zOUwqhvmZr" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Encode text for XML storage.&amp;#010;We simply convert all types of newLines to the &quot;\n&quot; or &amp;#010;&amp;#010;entity.&amp;#010;@param text       the not yet encoded text&amp;#010;@param endChars   the chars at the end of each line&amp;#010;@return           the encoded text" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_hvTbeAPjN0ZQ" parent_id="hvTbeAPjN0ZQ" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Decode text from XML storage.&amp;#010;We simply convert all newLine entity &amp;#010; to chosen line ending.&amp;#010;@param text       the not yet decoded text&amp;#010;@param endChars   the chars at the end of each line&amp;#010;@return           the decoded text" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_bBSn9SdBJO3K" parent_id="bBSn9SdBJO3K" writeOutText="false" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Save the XMI representation of this object&amp;#010;@param doc    the xmi document&amp;#010;@param root   the starting point to append" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_ekDohddoLmxL" parent_id="ekDohddoLmxL" writeOutText="false" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Load params from the appropriate XMI element node.&amp;#010;@param root   the starting point in the xmi document to load from" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_coAI27TfreTZ" parent_id="coAI27TfreTZ" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Determine if its OK to delete this textblock from the document.&amp;#010;Used by the text editor to know if deletion could cause a crash of&amp;#010;the program.&amp;#010;@return   the value of m_canDelete" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_8qjXrBKT0Uj0" parent_id="8qjXrBKT0Uj0" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the class attributes from a passed object.&amp;#010;@param obj   text block from which the attributes are taken" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_bWvmokwuYgPP" parent_id="bWvmokwuYgPP" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Used by the CodeEditor. It provides it with an appropriate&amp;#010;starting string for a new line of text within the given textblock&amp;#010;(for example a string with the proper indentation).&amp;#010;If the indentation amount is '0' the current indentation string will&amp;#010;be used.&amp;#010;&lt;p>&amp;#010;TODO: Can be refactored away and replaced with&amp;#010;&lt;a href=&quot;#getIndentationString&quot;>getIndentationString&lt;/a>.&amp;#010;@param indentAmount   the number of indent steps to use&amp;#010;@return               the new line" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_7iPfOp4EXu3l" parent_id="7iPfOp4EXu3l" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Ush. These are terrifically bad and must one day go away.&amp;#010;Both methods indicate the range of lines in this textblock&amp;#010;which may be edited by the codeeditor (assuming that any are&amp;#010;actually editable). The default case is no lines are editable.&amp;#010;The line numbering starts with '0' and a '-1' means no line&amp;#010;qualifies.&amp;#010;@return   line number" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_anLKC7pHpDwC" parent_id="anLKC7pHpDwC" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="@see firstEditableLine" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_UIFMfYdFLwXV" parent_id="UIFMfYdFLwXV" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the attribute m_canDelete.&amp;#010;@param canDelete   the new value to set" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_oJo35KZYamuF" parent_id="oJo35KZYamuF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Causes the text block to release all of its connections&amp;#010;and any other text blocks that it 'owns'.&amp;#010;needed to be called prior to deletion of the textblock." />
         </header>
        </codeoperation>
        <codeoperation tag="operation_JVScQ06RLqEr" parent_id="JVScQ06RLqEr" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set attributes of the node that represents this class&amp;#010;in the XMI document.&amp;#010;@param doc            the xmi document&amp;#010;@param blockElement   the xmi element holding the attributes" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_umYDcm472RFc" parent_id="umYDcm472RFc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the class attributes of this object from&amp;#010;the passed element node.&amp;#010;@param element   the xmi element from which to load" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_vgKec0kUkIhK" parent_id="vgKec0kUkIhK" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        TextBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="z7Zd6YnAa4bu" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="z7Zd6YnAa4bu" indentLevel="1" text="private QString m_text;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_5" accessType="0" parent_id="z7Zd6YnAa4bu" writeOutText="false" classfield_id="z7Zd6YnAa4bu" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_6" accessType="1" parent_id="z7Zd6YnAa4bu" writeOutText="false" classfield_id="z7Zd6YnAa4bu" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="IN3iCLmKqg4a" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="IN3iCLmKqg4a" indentLevel="1" text="private QString m_tag;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_7" accessType="0" parent_id="IN3iCLmKqg4a" writeOutText="false" classfield_id="IN3iCLmKqg4a" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_8" accessType="1" parent_id="IN3iCLmKqg4a" writeOutText="false" classfield_id="IN3iCLmKqg4a" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="B7IFg5OG7x8U" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="B7IFg5OG7x8U" indentLevel="1" text="private bool m_canDelete;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_9" accessType="0" parent_id="B7IFg5OG7x8U" writeOutText="false" classfield_id="B7IFg5OG7x8U" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_10" accessType="1" parent_id="B7IFg5OG7x8U" writeOutText="false" classfield_id="B7IFg5OG7x8U" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="6gOayjeewxQG" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="6gOayjeewxQG" indentLevel="1" text="private bool m_writeOutText;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_11" accessType="0" parent_id="6gOayjeewxQG" writeOutText="false" classfield_id="6gOayjeewxQG" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_12" accessType="1" parent_id="6gOayjeewxQG" writeOutText="false" classfield_id="6gOayjeewxQG" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="n6IMkRT0g744" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="n6IMkRT0g744" indentLevel="1" text="private int m_indentationLevel;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_13" accessType="0" parent_id="n6IMkRT0g744" writeOutText="false" classfield_id="n6IMkRT0g744" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_14" accessType="1" parent_id="n6IMkRT0g744" writeOutText="false" classfield_id="n6IMkRT0g744" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="LB1UgLim16Ly" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="LB1UgLim16Ly" indentLevel="1" text="private QString m_parentDocument;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_15" accessType="0" parent_id="LB1UgLim16Ly" writeOutText="false" classfield_id="LB1UgLim16Ly" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_16" accessType="1" parent_id="LB1UgLim16Ly" writeOutText="false" classfield_id="LB1UgLim16Ly" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="0" listClassName="" field_type="4" parent_id="BPcdkkvf9ZHx" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" text="protected CodeGenObjectWithTextBlocks ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_12" accessType="0" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_13" accessType="1" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_14" accessType="2" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_15" accessType="3" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_16" accessType="4" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="0" listClassName="" field_type="2097266" parent_id="3L2VUTTPotpQ" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" text="public CodeBlock ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="" accessType="0" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="" accessType="1" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="" accessType="2" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="" accessType="3" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="" accessType="4" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="3g0SeYM2QLXn" id="3g0SeYM2QLXn" fileName="CodeComment" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codecomment.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation tag="operation_0h3th0whzeVR" parent_id="0h3th0whzeVR" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation tag="operation_zfe3H38hpWwx" parent_id="zfe3H38hpWwx" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_J3AXJt2x400i" parent_id="J3AXJt2x400i" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod role_id="1" tag="hblock_tag_0" accessType="0" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_1" accessType="1" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_2" accessType="2" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_3" accessType="3" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_4" accessType="4" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeComment.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:52:53&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="0" listClassName="" field_type="4" parent_id="xyQrGvXlmAvF" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" text="public CodeBlockWithComments ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_0" accessType="0" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_1" accessType="1" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_2" accessType="2" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_3" accessType="3" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_4" accessType="4" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="MwFfYBQ2FgYa" id="MwFfYBQ2FgYa" fileName="QString" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qstring.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QString.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:06:58&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="f7G1rhTsLawQ" id="f7G1rhTsLawQ" fileName="CodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeaccessormethod role_id="1" tag="hblock_tag_0" accessType="0" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_5" accessType="0" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_6" accessType="1" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_7" accessType="2" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_8" accessType="3" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_1" accessType="1" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_2" accessType="2" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_3" accessType="3" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_4" accessType="4" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_9" accessType="4" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeoperation tag="operation_vsgTVdpYyyL1" parent_id="vsgTVdpYyyL1" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_ViITedVGC0Um" parent_id="ViITedVGC0Um" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_qYJeUQU1ngR3" parent_id="qYJeUQU1ngR3" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_BBSjT4BrYCeE" parent_id="BBSjT4BrYCeE" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_oucIZIJSBJoo" parent_id="oucIZIJSBJoo" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_odrhTW5NPIqQ" parent_id="odrhTW5NPIqQ" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_PKQ6ExpJtDtp" parent_id="PKQ6ExpJtDtp" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_CxuJvYwvbwAS" parent_id="CxuJvYwvbwAS" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_4CF17WufQnEM" parent_id="4CF17WufQnEM" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod role_id="1" tag="hblock_tag_10" accessType="0" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_11" accessType="1" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_12" accessType="2" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_13" accessType="3" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="1" tag="hblock_tag_14" accessType="4" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeDocument.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:08:45&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="kJjcKhHRvHHa" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="" parent_id="kJjcKhHRvHHa" writeOutText="false" indentLevel="1" text="public CodeDocument ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_0" accessType="0" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_1" accessType="1" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_2" accessType="2" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_3" accessType="3" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_4" accessType="4" parent_id="kJjcKhHRvHHa" writeOutText="false" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="0" listClassName="" field_type="4" parent_id="FPh2EzNI3uaH" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" text="public CodeGenerator ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_5" accessType="0" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_6" accessType="1" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_7" accessType="2" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_8" accessType="3" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_9" accessType="4" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="0" listClassName="" field_type="4" parent_id="0SkJJATCLRmc" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" text="public CodeGenObjectWithTextBlocks ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_10" accessType="0" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_11" accessType="1" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_12" accessType="2" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_13" accessType="3" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_14" accessType="4" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="3wrR9vG5HXHo" id="3wrR9vG5HXHo" fileName="ClassifierCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;classifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="O5KIPdcScWqw" id="O5KIPdcScWqw" fileName="CPPHeaderCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppheadercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="TA5se9TCTbye" id="TA5se9TCTbye" fileName="CPPSourceCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppsourcecodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="OR4SxRRJWlZv" id="OR4SxRRJWlZv" fileName="DClassifierCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dclassifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="NBNzfBt9Lyz0" id="NBNzfBt9Lyz0" fileName="JavaClassifierCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javaclassifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="6RAZ26BQXDtS" id="6RAZ26BQXDtS" fileName="RubyClassifierCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubyclassifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="iHrU5UEEhxRE" id="iHrU5UEEhxRE" fileName="CodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeaccessormethod role_id="0" tag="hblock_tag_0" accessType="0" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_1" accessType="1" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_2" accessType="2" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_3" accessType="3" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="4" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="FPh2EzNI3uaH" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" text="public CodeDocument ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="hblock_tag_0" accessType="0" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_1" accessType="1" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_2" accessType="2" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_3" accessType="3" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="4" parent_id="FPh2EzNI3uaH" writeOutText="false" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="qwX6tWnlosv4" id="qwX6tWnlosv4" fileName="SimpleCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        SimpleCodeGenerator.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:18:45&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="RioDFKLz4fWH" id="RioDFKLz4fWH" fileName="CppCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppcodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="4VLLyWYyPSiB" id="4VLLyWYyPSiB" fileName="JavaCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javacodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="HYSgCYAbHzpW" id="HYSgCYAbHzpW" fileName="DCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dcodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="HATJp0asTwDR" id="HATJp0asTwDR" fileName="RubyCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubycodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="0devhnagACPi" id="0devhnagACPi" fileName="AdaWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;adawriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="uLsaI6CnTPN2" id="uLsaI6CnTPN2" fileName="ASWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;aswriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="RDkegKrevVac" id="RDkegKrevVac" fileName="CSharpWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;csharpwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="G8IRKg7E1zmJ" id="G8IRKg7E1zmJ" fileName="IDLWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;idlwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="3x4UMRWlfENJ" id="3x4UMRWlfENJ" fileName="JSWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;jswriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="dqGK9eBp3YOQ" id="dqGK9eBp3YOQ" fileName="PascalWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;pascalwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="Kv9Vwhm7by3n" id="Kv9Vwhm7by3n" fileName="PerlWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;perlwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="V0DXuc8itQqV" id="V0DXuc8itQqV" fileName="Php5Writer" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;php5writer.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="bfZ83zaMshro" id="bfZ83zaMshro" fileName="PhpWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;phpwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="MbwwZzj5xuap" id="MbwwZzj5xuap" fileName="SQLWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;sqlwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="XgYQ4Otf3Sl5" id="XgYQ4Otf3Sl5" fileName="TclWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;tclwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="y1Svv2jQgHok" id="y1Svv2jQgHok" fileName="XmlSchemaWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;xmlschemawriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="jwOkOs8vBX0r" id="jwOkOs8vBX0r" fileName="MySQLWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;mysqlwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="gFn876THVHL7" id="gFn876THVHL7" fileName="PostgreSQLWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;postgresqlwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="X8g6MIwM07CF" id="X8g6MIwM07CF" fileName="CppWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="qcxB0qcl2zrA" id="qcxB0qcl2zrA" fileName="DWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="P8ZiiFaD2O39" id="P8ZiiFaD2O39" fileName="JavaWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javawriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="VF23HLo5vlEw" id="VF23HLo5vlEw" fileName="RubyWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubywriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="xEi5TDIkcYs7" id="xEi5TDIkcYs7" fileName="CPPCodeComment" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppcodecomment.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="g4EvylKsG4dz" id="g4EvylKsG4dz" fileName="CPPCodeDocumentation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppcodedocumentation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="P1pD0gRXLqvX" id="P1pD0gRXLqvX" fileName="DCodeDocumentation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dcodedocumentation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="LfB1jPuh9DXP" id="LfB1jPuh9DXP" fileName="JavaCodeDocumentation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javacodedocumentation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="F9M7Xe1wgq8g" id="F9M7Xe1wgq8g" fileName="RubyCodeDocumentation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubycodedocumentation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="WRUoOYRGE0Zn" id="WRUoOYRGE0Zn" fileName="QDomDocument" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="OGGjVgBz5goR" id="OGGjVgBz5goR" fileName="QDomElement" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="wCmtTUdaJUas" id="wCmtTUdaJUas" fileName="CodeBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks>
        <codeoperation tag="operation_hslVjat5u4kJ" parent_id="hslVjat5u4kJ" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Constructor with QString so we can create and populate it in&amp;#010;one step.&amp;#010;@param parent   the parent of this code block&amp;#010;@param body     the code or body of this code block" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_Z5JR91iAki90" parent_id="Z5JR91iAki90" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Empty Destructor" />
         </header>
        </codeoperation>
       </textblocks>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation tag="operation_iob7B8P7teyt" parent_id="iob7B8P7teyt" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the value of m_contentType&amp;#010;specifies whether the content (text) of this object was generated by the code&amp;#010;generator or was supplied by the user.&amp;#010;@param new_var the new value of m_contentType" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_Eo3yWCwDyXK9" parent_id="Eo3yWCwDyXK9" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Get the value of m_contentType&amp;#010;specifies whether the content (text) of this object was generated by the code&amp;#010;generator or was supplied by the user.&amp;#010;@return the value of m_contentType" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_iF5VUBNixQfR" parent_id="iF5VUBNixQfR" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Return a string representation of ContentType.&amp;#010;&amp;#010;@param  val  the enum value of the ContentType&amp;#010;@return      the string representation of the enum" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_1KEfCUbF66ei" parent_id="1KEfCUbF66ei" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Save the XMI representation of this object.&amp;#010;@param doc    the xmi document&amp;#010;@param root   the starting point to append" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_0Bu6FYpA2n5O" parent_id="0Bu6FYpA2n5O" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Load params from the appropriate XMI element node.&amp;#010;@param root   the starting point to load from" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_Zi21EbgEkbK0" parent_id="Zi21EbgEkbK0" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the class attributes from a passed object.&amp;#010;@param obj   text block from which the attributes are taken" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_dhJm3hpaNrcb" parent_id="dhJm3hpaNrcb" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set attributes of the node that represents this class&amp;#010;in the XMI document.&amp;#010;@param doc            the xmi document&amp;#010;@param blockElement   the xmi element holding the attributes" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_qCkB2MlTdYcU" parent_id="qCkB2MlTdYcU" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Set the class attributes of this object from&amp;#010;the passed element node.&amp;#010;@param element   the xmi element from which to load" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_2JtBSGLGQ5PS" parent_id="2JtBSGLGQ5PS" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="PoOhnLP1aPev" writeOutText="false" classfield_id="PoOhnLP1aPev" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="PoOhnLP1aPev" writeOutText="false" classfield_id="PoOhnLP1aPev" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="1" listClassName="" field_type="16" parent_id="3L2VUTTPotpQ" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" text="public TextBlock ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="" accessType="0" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="" accessType="1" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="" accessType="2" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="" accessType="3" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="" accessType="4" parent_id="3L2VUTTPotpQ" writeOutText="false" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="PoOhnLP1aPev" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="PoOhnLP1aPev" indentLevel="1" text="private ContentType m_contentType;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="PoOhnLP1aPev" writeOutText="false" classfield_id="PoOhnLP1aPev" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="PoOhnLP1aPev" writeOutText="false" classfield_id="PoOhnLP1aPev" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="AlkLO8F1ENsy" id="AlkLO8F1ENsy" fileName="CodeBlockWithComments" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codeblockwithcomments.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeaccessormethod role_id="0" tag="hblock_tag_0" accessType="0" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_1" accessType="1" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_2" accessType="2" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_3" accessType="3" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="4" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeBlockWithComments.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:31:31&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="xyQrGvXlmAvF" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" text="public CodeComment ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="hblock_tag_0" accessType="0" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_1" accessType="1" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_2" accessType="2" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_3" accessType="3" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="4" parent_id="xyQrGvXlmAvF" writeOutText="false" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="bN5OIiOpQHhf" id="bN5OIiOpQHhf" fileName="CodeParameter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codeparameter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="WUh3YNFHtj4I" id="WUh3YNFHtj4I" fileName="CodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeClassField.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:44:41&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="Ij239LgPp8Hc" id="Ij239LgPp8Hc" fileName="OwnedCodeBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;ownedcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        OwnedCodeBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:31:35&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="KCoreTfgzLbR" id="KCoreTfgzLbR" fileName="CodeGenObjectWithTextBlocks" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codegenobjectwithtextblocks.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks>
        <codeoperation tag="operation_wE8vEthGr4Qv" parent_id="wE8vEthGr4Qv" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_wtnbT6sEs6nZ" parent_id="wtnbT6sEs6nZ" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_IFrMXPEKRSZM" parent_id="IFrMXPEKRSZM" writeOutText="false" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeoperation tag="operation_cqmLcuPdEnBy" parent_id="cqmLcuPdEnBy" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeoperation>
        <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="x4pHgUko8Lze" writeOutText="false" classfield_id="x4pHgUko8Lze" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="x4pHgUko8Lze" writeOutText="false" classfield_id="x4pHgUko8Lze" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="2" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_5" accessType="3" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_6" accessType="4" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_7" accessType="0" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_8" accessType="1" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_9" accessType="2" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_10" accessType="3" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
        <codeaccessormethod role_id="0" tag="hblock_tag_11" accessType="4" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" />
         </header>
        </codeaccessormethod>
       </textblocks>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeGenObjectWithTextBlocks.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:19:14&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="x4pHgUko8Lze" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="" parent_id="x4pHgUko8Lze" indentLevel="1" text="private QMap&lt;QString, TextBlock*> m_textBlockTagMap;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="x4pHgUko8Lze" writeOutText="false" classfield_id="x4pHgUko8Lze" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="x4pHgUko8Lze" writeOutText="false" classfield_id="x4pHgUko8Lze" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="0SkJJATCLRmc" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" text="public CodeDocument ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="hblock_tag_2" accessType="0" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_3" accessType="1" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="2" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_5" accessType="3" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_6" accessType="4" parent_id="0SkJJATCLRmc" writeOutText="false" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="BPcdkkvf9ZHx" writeOutMethods="false" initialValue=" new vector( )" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" text="protected  Vector =  new vector( );" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="hblock_tag_7" accessType="0" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_8" accessType="1" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_9" accessType="2" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_10" accessType="3" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_11" accessType="4" parent_id="BPcdkkvf9ZHx" writeOutText="false" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="MUWqJEahCdIv" id="MUWqJEahCdIv" fileName="CodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codegenerationpolicy.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="U95NLxpwAx5e" id="U95NLxpwAx5e" fileName="CodeGenPolicyExt" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codegenpolicyext.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeGenPolicyExt.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:46:49&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="ROdeEp21W0qp" id="ROdeEp21W0qp" fileName="CPPCodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppcodegenerationpolicy.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="U6W9swSq6lon" id="U6W9swSq6lon" fileName="CPPCodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppcodeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="zwh7ZZ49qsor" id="zwh7ZZ49qsor" fileName="QWidget" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;qwidget.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="zAWEYEN1s0SX" id="zAWEYEN1s0SX" fileName="CodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="yFUx992ig7qV" id="yFUx992ig7qV" fileName="CPPCodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppcodegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="OsrBjOrGsHAf" id="OsrBjOrGsHAf" fileName="DCodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dcodegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="npB2tgdJU4c3" id="npB2tgdJU4c3" fileName="JavaCodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javacodegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="UrloMXdiNUt6" id="UrloMXdiNUt6" fileName="RubyCodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubycodegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="vshOusFS3rfc" id="vshOusFS3rfc" fileName="UMLPackage" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        UMLPackage.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:48:07&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="OM9K2aXZCevL" id="OM9K2aXZCevL" fileName="CodeMethodBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codemethodblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeMethodBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:23:19&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="eIS4WxEeax3z" id="eIS4WxEeax3z" fileName="CodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeOperation.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:46&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="Iu53SfgdXlut" id="Iu53SfgdXlut" fileName="CPPHeaderCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppheadercodeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPHeaderCodeOperation.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:36&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="jLvKjwr5hcTJ" id="jLvKjwr5hcTJ" fileName="CPPSourceCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppsourcecodeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPSourceCodeOperation.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:38&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="qTrW45AMzFPQ" id="qTrW45AMzFPQ" fileName="DCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dcodeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeOperation.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:41&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="u53RovKYEDqv" id="u53RovKYEDqv" fileName="JavaCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javacodeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeOperation.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:43&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="9f1qIU76vyaz" id="9f1qIU76vyaz" fileName="RubyCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubycodeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeOperation.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:46&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="NHEMZRBuya6J" id="NHEMZRBuya6J" fileName="TextBlock_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        TextBlock_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:03:23&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="d2p7tg7NMtAb" id="d2p7tg7NMtAb" fileName="QMap" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QMap.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:06:58&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="FPiPtJrSCuDy" id="FPiPtJrSCuDy" fileName="TextBlockList" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        TextBlockList.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:07:40&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="4M0YMb7hwr92" id="4M0YMb7hwr92" fileName="HierarchicalCodeBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;hierarchicalcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        HierarchicalCodeBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:21:01&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="ogqxDbXgm7Fg" id="ogqxDbXgm7Fg" fileName="OwnedHierarchicalCodeBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;ownedhierarchicalcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        OwnedHierarchicalCodeBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:43:09&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="lvSR6OAGl0B4" id="lvSR6OAGl0B4" fileName="CodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeAccessorMethod.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:27:57&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="W9KM3A2gK3yw" id="W9KM3A2gK3yw" fileName="CPPHeaderCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppheadercodeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPHeaderCodeAccessorMethod.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:26:29&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="PEOFL23VhXQB" id="PEOFL23VhXQB" fileName="CPPSourceCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppsourcecodeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPSourceCodeAccessorMethod.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:26:32&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="cCtfvPQxlaRq" id="cCtfvPQxlaRq" fileName="DCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dcodeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeAccessorMethod.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:27:52&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="ResUt6N6FjJr" id="ResUt6N6FjJr" fileName="JavaCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javacodeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeAccessorMethod.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:27:55&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="cdmLc2CEC5t8" id="cdmLc2CEC5t8" fileName="RubyCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubycodeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeAccessorMethod.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:27:57&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="XcUrOBmtxmKw" id="XcUrOBmtxmKw" fileName="CodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;codeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeClassFieldDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:37:49&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="OJJ1HVZly9bb" id="OJJ1HVZly9bb" fileName="CPPHeaderCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppheadercodeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPHeaderCodeClassFieldDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:35:07&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="kTfHorqKJu52" id="kTfHorqKJu52" fileName="CPPSourceCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppsourcecodeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPSourceCodeClassFieldDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:35:09&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="lhR0LFgyIeSw" id="lhR0LFgyIeSw" fileName="DCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dcodeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeClassFieldDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:37:04&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="CX4wTB2ARs4d" id="CX4wTB2ARs4d" fileName="JavaCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javacodeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeClassFieldDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:37:07&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="lysPzzxQLIHW" id="lysPzzxQLIHW" fileName="RubyCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubycodeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeClassFieldDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:37:49&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="SHu6nDwDWxEZ" id="SHu6nDwDWxEZ" fileName="CPPHeaderClassDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;cppheaderclassdeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPHeaderClassDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:38:52&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="om0wYqKDlU2d" id="om0wYqKDlU2d" fileName="DClassDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dclassdeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DClassDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:43:04&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="UK8CHmsdfe6T" id="UK8CHmsdfe6T" fileName="JavaClassDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javaclassdeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaClassDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:43:06&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="B4k5dbNoMrqx" id="B4k5dbNoMrqx" fileName="RubyClassDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubyclassdeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyClassDeclarationBlock.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:43:09&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="fCdVDTUs9mun" id="fCdVDTUs9mun" fileName="DCodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dcodeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeClassField.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:44:36&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="2Orhhvd0SErt" id="2Orhhvd0SErt" fileName="JavaCodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javacodeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeClassField.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:44:38&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="bLR0Lugy5HSI" id="bLR0Lugy5HSI" fileName="RubyCodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubycodeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeClassField.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:44:41&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="rfoPnMdBM4KY" id="rfoPnMdBM4KY" fileName="DCodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;dcodegenerationpolicy.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeGenerationPolicy.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:46:44&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="sc9L4fq9Cd3i" id="sc9L4fq9Cd3i" fileName="JavaCodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;javacodegenerationpolicy.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeGenerationPolicy.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:46:47&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="QD1JRKvGxjdk" id="QD1JRKvGxjdk" fileName="RubyCodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="includes" text="#include &quot;rubycodegenerationpolicy.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="constructionMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Constructors/Destructors" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
      <hierarchicalcodeblock tag="otherMethodsBlock" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Methods" />
       </header>
       <textblocks/>
      </hierarchicalcodeblock>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeGenerationPolicy.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:46:49&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".cpp" parent_class="rf2HpDpVQn5w" id="rf2HpDpVQn5w" fileName="CodeDocument_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeDocument_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:49&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".cpp" parent_class="f0G2JJryL6nW" id="f0G2JJryL6nW" fileName="const_QString_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        const_QString_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:49&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".cpp" parent_class="Kr387OdW8qKs" id="Kr387OdW8qKs" fileName="QDomDocument_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QDomDocument_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:50&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".cpp" parent_class="8jB92Tz5c4RD" id="8jB92Tz5c4RD" fileName="QDomElement_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QDomElement_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:50&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".cpp" parent_class="5jQ58fhxUjWi" id="5jQ58fhxUjWi" fileName="QTextStream" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QTextStream.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:50&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".cpp" parent_class="BrdhYqvTUF57" id="BrdhYqvTUF57" fileName="QTextStream_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QTextStream_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".cpp" parent_class="Lu4pbaWmS9R0" id="Lu4pbaWmS9R0" fileName="const_TextBlock_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        const_TextBlock_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".cpp" parent_class="abeY7wglduGy" id="abeY7wglduGy" fileName="const_ContentType_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        const_ContentType_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".cpp" parent_class="bCXrl17nI0wk" id="bCXrl17nI0wk" fileName="const_CodeBlock_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        const_CodeBlock_.cpp - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.cpp&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="hJKzGhjDeJFT" id="cppheaderhJKzGhjDeJFT" fileName="QObject" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QOBJECT_H&amp;#010;#define QOBJECT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QOBJECT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="8ABALi12YGmn" id="cppheader8ABALi12YGmn" fileName="TextBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef TEXTBLOCK_H&amp;#010;#define TEXTBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;textblock_.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock tag="classDeclarationBlock" parent_id="8ABALi12YGmn" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Class TextBlock&amp;#010;The fundemental unit of text within an output file containing code." />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" indentLevel="1" text="TextBlock ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
                <codeoperation tag="operation_7pSSqjfS0NL2" parent_id="7pSSqjfS0NL2" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_J9dp9A5o8MqP" parent_id="J9dp9A5o8MqP" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation tag="operation_aKFz1islnjuY" parent_id="aKFz1islnjuY" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param text " />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_kd3IlRdigGEq" parent_id="kd3IlRdigGEq" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param text " />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_qFFxzsyGbPrH" parent_id="qFFxzsyGbPrH" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_UstjE74Oi74Q" parent_id="UstjE74Oi74Q" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_dfNwl9ShPOOh" parent_id="dfNwl9ShPOOh" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_tMN0gBPJqlDc" parent_id="tMN0gBPJqlDc" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_Broq8JV3mRbv" parent_id="Broq8JV3mRbv" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_GvpV5h6GYv6e" parent_id="GvpV5h6GYv6e" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_dfNwFtDVm00r" parent_id="dfNwFtDVm00r" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_pvX3s6pTlCQy" parent_id="pvX3s6pTlCQy" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_uLbdtfMhbrkR" parent_id="uLbdtfMhbrkR" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_WBm0uGRpb1QT" parent_id="WBm0uGRpb1QT" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_vpppvNJPY6PT" parent_id="vpppvNJPY6PT" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_y3pV9FwT4APu" parent_id="y3pV9FwT4APu" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_O3btcLJZP94Y" parent_id="O3btcLJZP94Y" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_rFrSu66I7gAj" parent_id="rFrSu66I7gAj" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_6iJueM1s6EeM" parent_id="6iJueM1s6EeM" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_CzvuyUGV4KAU" parent_id="CzvuyUGV4KAU" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_h2zOUwqhvmZr" parent_id="h2zOUwqhvmZr" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_hvTbeAPjN0ZQ" parent_id="hvTbeAPjN0ZQ" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_bBSn9SdBJO3K" parent_id="bBSn9SdBJO3K" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_ekDohddoLmxL" parent_id="ekDohddoLmxL" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_coAI27TfreTZ" parent_id="coAI27TfreTZ" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_8qjXrBKT0Uj0" parent_id="8qjXrBKT0Uj0" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_bWvmokwuYgPP" parent_id="bWvmokwuYgPP" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_7iPfOp4EXu3l" parent_id="7iPfOp4EXu3l" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_anLKC7pHpDwC" parent_id="anLKC7pHpDwC" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks>
              <ccfdeclarationcodeblock role_id="1" tag="tblock_0" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" text=" CodeGenObjectWithTextBlocks ;" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
               </header>
              </ccfdeclarationcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks>
                  <codeaccessormethod role_id="1" tag="hblock_tag_0" accessType="0" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod role_id="1" tag="hblock_tag_6" accessType="1" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod role_id="1" tag="hblock_tag_7" accessType="2" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod role_id="1" tag="hblock_tag_8" accessType="3" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod role_id="1" tag="hblock_tag_9" accessType="4" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                 </textblocks>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation tag="operation_UIFMfYdFLwXV" parent_id="UIFMfYdFLwXV" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_oJo35KZYamuF" parent_id="oJo35KZYamuF" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_JVScQ06RLqEr" parent_id="JVScQ06RLqEr" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_umYDcm472RFc" parent_id="umYDcm472RFc" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_vgKec0kUkIhK" parent_id="vgKec0kUkIhK" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param os &amp;#010;@param obj " />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks>
              <ccfdeclarationcodeblock tag="tblock_0" parent_id="z7Zd6YnAa4bu" indentLevel="1" text=" QString m_text;" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
               </header>
              </ccfdeclarationcodeblock>
              <ccfdeclarationcodeblock tag="_2" parent_id="IN3iCLmKqg4a" indentLevel="1" text=" QString m_tag;" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
               </header>
              </ccfdeclarationcodeblock>
              <ccfdeclarationcodeblock tag="_5" parent_id="B7IFg5OG7x8U" indentLevel="1" text=" bool m_canDelete;" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
               </header>
              </ccfdeclarationcodeblock>
              <ccfdeclarationcodeblock tag="_8" parent_id="6gOayjeewxQG" indentLevel="1" text=" bool m_writeOutText;" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
               </header>
              </ccfdeclarationcodeblock>
              <ccfdeclarationcodeblock tag="_11" parent_id="n6IMkRT0g744" indentLevel="1" text=" int m_indentationLevel;" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
               </header>
              </ccfdeclarationcodeblock>
              <ccfdeclarationcodeblock tag="_14" parent_id="LB1UgLim16Ly" indentLevel="1" text=" QString m_parentDocument;" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
               </header>
              </ccfdeclarationcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks>
                  <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="z7Zd6YnAa4bu" writeOutText="false" indentLevel="1" classfield_id="z7Zd6YnAa4bu" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="z7Zd6YnAa4bu" writeOutText="false" indentLevel="1" classfield_id="z7Zd6YnAa4bu" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_3" accessType="0" parent_id="IN3iCLmKqg4a" writeOutText="false" indentLevel="1" classfield_id="IN3iCLmKqg4a" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_4" accessType="1" parent_id="IN3iCLmKqg4a" writeOutText="false" indentLevel="1" classfield_id="IN3iCLmKqg4a" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_6" accessType="0" parent_id="B7IFg5OG7x8U" writeOutText="false" indentLevel="1" classfield_id="B7IFg5OG7x8U" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_7" accessType="1" parent_id="B7IFg5OG7x8U" writeOutText="false" indentLevel="1" classfield_id="B7IFg5OG7x8U" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_9" accessType="0" parent_id="6gOayjeewxQG" writeOutText="false" indentLevel="1" classfield_id="6gOayjeewxQG" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_10" accessType="1" parent_id="6gOayjeewxQG" writeOutText="false" indentLevel="1" classfield_id="6gOayjeewxQG" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_12" accessType="0" parent_id="n6IMkRT0g744" writeOutText="false" indentLevel="1" classfield_id="n6IMkRT0g744" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_13" accessType="1" parent_id="n6IMkRT0g744" writeOutText="false" indentLevel="1" classfield_id="n6IMkRT0g744" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_15" accessType="0" parent_id="LB1UgLim16Ly" writeOutText="false" indentLevel="1" classfield_id="LB1UgLim16Ly" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_16" accessType="1" parent_id="LB1UgLim16Ly" writeOutText="false" indentLevel="1" classfield_id="LB1UgLim16Ly" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                 </textblocks>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //TEXTBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        TextBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="z7Zd6YnAa4bu" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="z7Zd6YnAa4bu" indentLevel="1" text=" QString m_text;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="z7Zd6YnAa4bu" writeOutText="false" indentLevel="1" classfield_id="z7Zd6YnAa4bu" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="z7Zd6YnAa4bu" writeOutText="false" indentLevel="1" classfield_id="z7Zd6YnAa4bu" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="IN3iCLmKqg4a" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="_2" parent_id="IN3iCLmKqg4a" indentLevel="1" text=" QString m_tag;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_3" accessType="0" parent_id="IN3iCLmKqg4a" writeOutText="false" indentLevel="1" classfield_id="IN3iCLmKqg4a" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_4" accessType="1" parent_id="IN3iCLmKqg4a" writeOutText="false" indentLevel="1" classfield_id="IN3iCLmKqg4a" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="B7IFg5OG7x8U" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="_5" parent_id="B7IFg5OG7x8U" indentLevel="1" text=" bool m_canDelete;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_6" accessType="0" parent_id="B7IFg5OG7x8U" writeOutText="false" indentLevel="1" classfield_id="B7IFg5OG7x8U" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_7" accessType="1" parent_id="B7IFg5OG7x8U" writeOutText="false" indentLevel="1" classfield_id="B7IFg5OG7x8U" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="6gOayjeewxQG" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="_8" parent_id="6gOayjeewxQG" indentLevel="1" text=" bool m_writeOutText;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_9" accessType="0" parent_id="6gOayjeewxQG" writeOutText="false" indentLevel="1" classfield_id="6gOayjeewxQG" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_10" accessType="1" parent_id="6gOayjeewxQG" writeOutText="false" indentLevel="1" classfield_id="6gOayjeewxQG" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="n6IMkRT0g744" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="_11" parent_id="n6IMkRT0g744" indentLevel="1" text=" int m_indentationLevel;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_12" accessType="0" parent_id="n6IMkRT0g744" writeOutText="false" indentLevel="1" classfield_id="n6IMkRT0g744" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_13" accessType="1" parent_id="n6IMkRT0g744" writeOutText="false" indentLevel="1" classfield_id="n6IMkRT0g744" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="LB1UgLim16Ly" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="_14" parent_id="LB1UgLim16Ly" indentLevel="1" text=" QString m_parentDocument;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_15" accessType="0" parent_id="LB1UgLim16Ly" writeOutText="false" indentLevel="1" classfield_id="LB1UgLim16Ly" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_16" accessType="1" parent_id="LB1UgLim16Ly" writeOutText="false" indentLevel="1" classfield_id="LB1UgLim16Ly" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="0" listClassName="" field_type="4" parent_id="BPcdkkvf9ZHx" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="tblock_0" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" text=" CodeGenObjectWithTextBlocks ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_0" accessType="0" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_6" accessType="1" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_7" accessType="2" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_8" accessType="3" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_9" accessType="4" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="0" listClassName="" field_type="7667826" parent_id="3L2VUTTPotpQ" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" text=" CodeBlock ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="" accessType="0" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="" accessType="1" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="" accessType="2" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="" accessType="3" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="" accessType="4" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="3g0SeYM2QLXn" id="cppheader3g0SeYM2QLXn" fileName="CodeComment" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODECOMMENT_H&amp;#010;#define CODECOMMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;textblock.h&quot;&amp;#010;#include &quot;codedocument.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;qdomdocument.h&quot;&amp;#010;#include &quot;qdomelement.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODECOMMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeComment.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:52:53&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="0" listClassName="" field_type="4" parent_id="xyQrGvXlmAvF" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="tblock_0" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" text=" CodeBlockWithComments ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_0" accessType="0" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_1" accessType="1" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_2" accessType="2" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_3" accessType="3" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_4" accessType="4" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="MwFfYBQ2FgYa" id="cppheaderMwFfYBQ2FgYa" fileName="QString" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QSTRING_H&amp;#010;#define QSTRING_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QSTRING_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QString.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:06:58&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="f7G1rhTsLawQ" id="cppheaderf7G1rhTsLawQ" fileName="CodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEDOCUMENT_H&amp;#010;#define CODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qobject.h&quot;&amp;#010;#include &quot;codegenobjectwithtextblocks.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;umlpackage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeDocument.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:08:45&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="kJjcKhHRvHHa" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="tblock_0" parent_id="kJjcKhHRvHHa" writeOutText="false" indentLevel="1" text=" CodeDocument ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_0" accessType="0" parent_id="kJjcKhHRvHHa" writeOutText="false" indentLevel="1" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_2" accessType="1" parent_id="kJjcKhHRvHHa" writeOutText="false" indentLevel="1" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_3" accessType="2" parent_id="kJjcKhHRvHHa" writeOutText="false" indentLevel="1" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_4" accessType="3" parent_id="kJjcKhHRvHHa" writeOutText="false" indentLevel="1" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_5" accessType="4" parent_id="kJjcKhHRvHHa" writeOutText="false" indentLevel="1" classfield_id="kJjcKhHRvHHa" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="0" listClassName="" field_type="4" parent_id="FPh2EzNI3uaH" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="_0" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" text=" CodeGenerator ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_6" accessType="0" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_7" accessType="1" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_8" accessType="2" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_9" accessType="3" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_10" accessType="4" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="0" listClassName="" field_type="4" parent_id="0SkJJATCLRmc" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="1" tag="_1" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" text=" CodeGenObjectWithTextBlocks ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="1" tag="hblock_tag_11" accessType="0" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_12" accessType="1" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_13" accessType="2" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_14" accessType="3" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="1" tag="hblock_tag_15" accessType="4" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="3wrR9vG5HXHo" id="cppheader3wrR9vG5HXHo" fileName="ClassifierCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CLASSIFIERCODEDOCUMENT_H&amp;#010;#define CLASSIFIERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CLASSIFIERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="O5KIPdcScWqw" id="cppheaderO5KIPdcScWqw" fileName="CPPHeaderCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPHEADERCODEDOCUMENT_H&amp;#010;#define CPPHEADERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPHEADERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="TA5se9TCTbye" id="cppheaderTA5se9TCTbye" fileName="CPPSourceCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPSOURCECODEDOCUMENT_H&amp;#010;#define CPPSOURCECODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPSOURCECODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="OR4SxRRJWlZv" id="cppheaderOR4SxRRJWlZv" fileName="DClassifierCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCLASSIFIERCODEDOCUMENT_H&amp;#010;#define DCLASSIFIERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCLASSIFIERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="NBNzfBt9Lyz0" id="cppheaderNBNzfBt9Lyz0" fileName="JavaClassifierCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACLASSIFIERCODEDOCUMENT_H&amp;#010;#define JAVACLASSIFIERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACLASSIFIERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="6RAZ26BQXDtS" id="cppheader6RAZ26BQXDtS" fileName="RubyClassifierCodeDocument" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCLASSIFIERCODEDOCUMENT_H&amp;#010;#define RUBYCLASSIFIERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;classifiercodedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCLASSIFIERCODEDOCUMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="iHrU5UEEhxRE" id="cppheaderiHrU5UEEhxRE" fileName="CodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEGENERATOR_H&amp;#010;#define CODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qobject.h&quot;&amp;#010;#include &quot;codedocument.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="FPh2EzNI3uaH" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="tblock_0" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" text=" CodeDocument ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="hblock_tag_0" accessType="0" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_1" accessType="1" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_2" accessType="2" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_3" accessType="3" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="4" parent_id="FPh2EzNI3uaH" writeOutText="false" indentLevel="1" classfield_id="FPh2EzNI3uaH" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="qwX6tWnlosv4" id="cppheaderqwX6tWnlosv4" fileName="SimpleCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef SIMPLECODEGENERATOR_H&amp;#010;#define SIMPLECODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock tag="classDeclarationBlock" parent_id="qwX6tWnlosv4" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" text="Class SimpleCodeGenerator&amp;#010;" />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" indentLevel="1" text="SimpleCodeGenerator ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //SIMPLECODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        SimpleCodeGenerator.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:18:45&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="RioDFKLz4fWH" id="cppheaderRioDFKLz4fWH" fileName="CppCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPCODEGENERATOR_H&amp;#010;#define CPPCODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPCODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="4VLLyWYyPSiB" id="cppheader4VLLyWYyPSiB" fileName="JavaCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACODEGENERATOR_H&amp;#010;#define JAVACODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="HYSgCYAbHzpW" id="cppheaderHYSgCYAbHzpW" fileName="DCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCODEGENERATOR_H&amp;#010;#define DCODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="HATJp0asTwDR" id="cppheaderHATJp0asTwDR" fileName="RubyCodeGenerator" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCODEGENERATOR_H&amp;#010;#define RUBYCODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCODEGENERATOR_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="0devhnagACPi" id="cppheader0devhnagACPi" fileName="AdaWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ADAWRITER_H&amp;#010;#define ADAWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ADAWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="uLsaI6CnTPN2" id="cppheaderuLsaI6CnTPN2" fileName="ASWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef ASWRITER_H&amp;#010;#define ASWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //ASWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="RDkegKrevVac" id="cppheaderRDkegKrevVac" fileName="CSharpWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CSHARPWRITER_H&amp;#010;#define CSHARPWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CSHARPWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="G8IRKg7E1zmJ" id="cppheaderG8IRKg7E1zmJ" fileName="IDLWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef IDLWRITER_H&amp;#010;#define IDLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //IDLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="3x4UMRWlfENJ" id="cppheader3x4UMRWlfENJ" fileName="JSWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JSWRITER_H&amp;#010;#define JSWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JSWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="dqGK9eBp3YOQ" id="cppheaderdqGK9eBp3YOQ" fileName="PascalWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef PASCALWRITER_H&amp;#010;#define PASCALWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //PASCALWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="Kv9Vwhm7by3n" id="cppheaderKv9Vwhm7by3n" fileName="PerlWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef PERLWRITER_H&amp;#010;#define PERLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //PERLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="V0DXuc8itQqV" id="cppheaderV0DXuc8itQqV" fileName="Php5Writer" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef PHP5WRITER_H&amp;#010;#define PHP5WRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //PHP5WRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="bfZ83zaMshro" id="cppheaderbfZ83zaMshro" fileName="PhpWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef PHPWRITER_H&amp;#010;#define PHPWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //PHPWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="MbwwZzj5xuap" id="cppheaderMbwwZzj5xuap" fileName="SQLWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef SQLWRITER_H&amp;#010;#define SQLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //SQLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="XgYQ4Otf3Sl5" id="cppheaderXgYQ4Otf3Sl5" fileName="TclWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef TCLWRITER_H&amp;#010;#define TCLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //TCLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="y1Svv2jQgHok" id="cppheadery1Svv2jQgHok" fileName="XmlSchemaWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef XMLSCHEMAWRITER_H&amp;#010;#define XMLSCHEMAWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //XMLSCHEMAWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="jwOkOs8vBX0r" id="cppheaderjwOkOs8vBX0r" fileName="MySQLWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef MYSQLWRITER_H&amp;#010;#define MYSQLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;sqlwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //MYSQLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="gFn876THVHL7" id="cppheadergFn876THVHL7" fileName="PostgreSQLWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef POSTGRESQLWRITER_H&amp;#010;#define POSTGRESQLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;sqlwriter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //POSTGRESQLWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="X8g6MIwM07CF" id="cppheaderX8g6MIwM07CF" fileName="CppWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPWRITER_H&amp;#010;#define CPPWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="qcxB0qcl2zrA" id="cppheaderqcxB0qcl2zrA" fileName="DWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DWRITER_H&amp;#010;#define DWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="P8ZiiFaD2O39" id="cppheaderP8ZiiFaD2O39" fileName="JavaWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVAWRITER_H&amp;#010;#define JAVAWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVAWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="VF23HLo5vlEw" id="cppheaderVF23HLo5vlEw" fileName="RubyWriter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYWRITER_H&amp;#010;#define RUBYWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;simplecodegenerator.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYWRITER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="xEi5TDIkcYs7" id="cppheaderxEi5TDIkcYs7" fileName="CPPCodeComment" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPCODECOMMENT_H&amp;#010;#define CPPCODECOMMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codecomment.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPCODECOMMENT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="g4EvylKsG4dz" id="cppheaderg4EvylKsG4dz" fileName="CPPCodeDocumentation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPCODEDOCUMENTATION_H&amp;#010;#define CPPCODEDOCUMENTATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codecomment.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPCODEDOCUMENTATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="P1pD0gRXLqvX" id="cppheaderP1pD0gRXLqvX" fileName="DCodeDocumentation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCODEDOCUMENTATION_H&amp;#010;#define DCODEDOCUMENTATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codecomment.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCODEDOCUMENTATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="LfB1jPuh9DXP" id="cppheaderLfB1jPuh9DXP" fileName="JavaCodeDocumentation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACODEDOCUMENTATION_H&amp;#010;#define JAVACODEDOCUMENTATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codecomment.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACODEDOCUMENTATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="F9M7Xe1wgq8g" id="cppheaderF9M7Xe1wgq8g" fileName="RubyCodeDocumentation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCODEDOCUMENTATION_H&amp;#010;#define RUBYCODEDOCUMENTATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codecomment.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCODEDOCUMENTATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="WRUoOYRGE0Zn" id="cppheaderWRUoOYRGE0Zn" fileName="QDomDocument" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="OGGjVgBz5goR" id="cppheaderOGGjVgBz5goR" fileName="QDomElement" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="wCmtTUdaJUas" id="cppheaderwCmtTUdaJUas" fileName="CodeBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEBLOCK_H&amp;#010;#define CODEBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;textblock.h&quot;&amp;#010;#include &quot;contenttype.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;textblock_.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
        <cppheaderclassdeclarationblock tag="classDeclarationBlock" parent_id="wCmtTUdaJUas" canDelete="false" >
         <header>
          <cppcodedocumentation tag="" text="Class CodeBlock&amp;#010;  This program is free software; you can redistribute it and/or modify  *&amp;#010;  it under the terms of the GNU General Public License as published by  *&amp;#010;  the Free Software Foundation; either version 2 of the License, or     *&amp;#010;  (at your option) any later version.                                   *&amp;#010;                                                                        *&amp;#010;  copyright (C) 2003      Brian Thomas &lt;thomas@mail630.gsfc.nasa.gov>   *&amp;#010;  copyright (C) 2004-2008                                               *&amp;#010;  Umbrello UML Modeller Authors &lt;umbrello-devel@kde.org>                  *&amp;#010;//**&amp;#010;A &quot;chunk&quot; of code within the code document." />
         </header>
         <textblocks>
          <hierarchicalcodeblock tag="publicBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Public stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="publicFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="pubMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks>
                <codeblockwithcomments tag="emptyconstructor" indentLevel="1" text="CodeBlock ( ) { }" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="Empty Constructor" />
                 </header>
                </codeblockwithcomments>
                <codeoperation tag="operation_hslVjat5u4kJ" parent_id="hslVjat5u4kJ" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_Z5JR91iAki90" parent_id="Z5JR91iAki90" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="pubStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="pubRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation tag="operation_iob7B8P7teyt" parent_id="iob7B8P7teyt" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_Eo3yWCwDyXK9" parent_id="Eo3yWCwDyXK9" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_iF5VUBNixQfR" parent_id="iF5VUBNixQfR" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_1KEfCUbF66ei" parent_id="1KEfCUbF66ei" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_0Bu6FYpA2n5O" parent_id="0Bu6FYpA2n5O" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_Zi21EbgEkbK0" parent_id="Zi21EbgEkbK0" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="protectedBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Protected stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="protectedFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks/>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="protMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="protStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="protRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks>
                <codeoperation tag="operation_dhJm3hpaNrcb" parent_id="dhJm3hpaNrcb" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_qCkB2MlTdYcU" parent_id="qCkB2MlTdYcU" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" />
                 </header>
                </codeoperation>
                <codeoperation tag="operation_2JtBSGLGQ5PS" parent_id="2JtBSGLGQ5PS" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" indentLevel="1" text="&amp;#010;@param str &amp;#010;@param obj " />
                 </header>
                </codeoperation>
               </textblocks>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
          <hierarchicalcodeblock tag="privateBlock" canDelete="false" >
           <header>
            <cppcodedocumentation tag="" text="Private stuff" />
           </header>
           <textblocks>
            <hierarchicalcodeblock tag="privateFieldsDecl" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" text="Fields" />
             </header>
             <textblocks>
              <ccfdeclarationcodeblock tag="tblock_0" parent_id="PoOhnLP1aPev" indentLevel="1" text=" ContentType m_contentType;" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
               </header>
              </ccfdeclarationcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
            <hierarchicalcodeblock tag="privMethodsBlock" indentLevel="1" canDelete="false" >
             <header>
              <cppcodedocumentation tag="" indentLevel="1" />
             </header>
             <textblocks>
              <hierarchicalcodeblock tag="constructionMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Constructors" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="accessorMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Accessor Methods" />
               </header>
               <textblocks>
                <hierarchicalcodeblock tag="privStaticAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks/>
                </hierarchicalcodeblock>
                <hierarchicalcodeblock tag="privRegularAccessorMethods" indentLevel="1" canDelete="false" >
                 <header>
                  <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
                 </header>
                 <textblocks>
                  <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="PoOhnLP1aPev" writeOutText="false" indentLevel="1" classfield_id="PoOhnLP1aPev" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                  <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="PoOhnLP1aPev" writeOutText="false" indentLevel="1" classfield_id="PoOhnLP1aPev" canDelete="false" >
                   <header>
                    <cppcodedocumentation tag="" indentLevel="1" />
                   </header>
                  </codeaccessormethod>
                 </textblocks>
                </hierarchicalcodeblock>
               </textblocks>
              </hierarchicalcodeblock>
              <hierarchicalcodeblock tag="operationMethods" indentLevel="1" canDelete="false" >
               <header>
                <cppcodedocumentation tag="" indentLevel="1" text="Operations" />
               </header>
               <textblocks/>
              </hierarchicalcodeblock>
             </textblocks>
            </hierarchicalcodeblock>
           </textblocks>
          </hierarchicalcodeblock>
         </textblocks>
        </cppheaderclassdeclarationblock>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="1" listClassName="" field_type="99" parent_id="3L2VUTTPotpQ" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" text=" TextBlock ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="" accessType="0" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="" accessType="1" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="" accessType="2" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="" accessType="3" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="" accessType="4" parent_id="3L2VUTTPotpQ" writeOutText="false" indentLevel="1" classfield_id="3L2VUTTPotpQ" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="PoOhnLP1aPev" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="PoOhnLP1aPev" indentLevel="1" text=" ContentType m_contentType;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="PoOhnLP1aPev" writeOutText="false" indentLevel="1" classfield_id="PoOhnLP1aPev" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="PoOhnLP1aPev" writeOutText="false" indentLevel="1" classfield_id="PoOhnLP1aPev" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="AlkLO8F1ENsy" id="cppheaderAlkLO8F1ENsy" fileName="CodeBlockWithComments" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEBLOCKWITHCOMMENTS_H&amp;#010;#define CODEBLOCKWITHCOMMENTS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeblock.h&quot;&amp;#010;#include &quot;codecomment.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEBLOCKWITHCOMMENTS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeBlockWithComments.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:31:31&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="xyQrGvXlmAvF" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="tblock_0" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" text=" CodeComment ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="hblock_tag_0" accessType="0" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_1" accessType="1" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_2" accessType="2" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_3" accessType="3" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="4" parent_id="xyQrGvXlmAvF" writeOutText="false" indentLevel="1" classfield_id="xyQrGvXlmAvF" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="bN5OIiOpQHhf" id="cppheaderbN5OIiOpQHhf" fileName="CodeParameter" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEPARAMETER_H&amp;#010;#define CODEPARAMETER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qobject.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEPARAMETER_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="WUh3YNFHtj4I" id="cppheaderWUh3YNFHtj4I" fileName="CodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODECLASSFIELD_H&amp;#010;#define CODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeparameter.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeClassField.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:44:41&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="Ij239LgPp8Hc" id="cppheaderIj239LgPp8Hc" fileName="OwnedCodeBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef OWNEDCODEBLOCK_H&amp;#010;#define OWNEDCODEBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qobject.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //OWNEDCODEBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        OwnedCodeBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:31:35&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="KCoreTfgzLbR" id="cppheaderKCoreTfgzLbR" fileName="CodeGenObjectWithTextBlocks" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEGENOBJECTWITHTEXTBLOCKS_H&amp;#010;#define CODEGENOBJECTWITHTEXTBLOCKS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &lt;vector>&amp;#010;#include &quot;textblock.h&quot;&amp;#010;#include &quot;qstring.h&quot;&amp;#010;#include &quot;.h&quot;&amp;#010;#include &quot;codedocument.h&quot;&amp;#010;#include &quot;textblock_.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEGENOBJECTWITHTEXTBLOCKS_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeGenObjectWithTextBlocks.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:19:14&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields>
      <codeclassfield role_id="-1" listClassName="" field_type="0" parent_id="x4pHgUko8Lze" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock tag="tblock_0" parent_id="x4pHgUko8Lze" indentLevel="1" text=" QMap&lt;QString, TextBlock*> m_textBlockTagMap;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod tag="hblock_tag_0" accessType="0" parent_id="x4pHgUko8Lze" writeOutText="false" indentLevel="1" classfield_id="x4pHgUko8Lze" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod tag="hblock_tag_1" accessType="1" parent_id="x4pHgUko8Lze" writeOutText="false" indentLevel="1" classfield_id="x4pHgUko8Lze" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="0SkJJATCLRmc" writeOutMethods="false" initialValue="" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="tblock_0" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" text=" CodeDocument ;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="hblock_tag_0" accessType="0" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_2" accessType="1" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_3" accessType="2" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_4" accessType="3" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_5" accessType="4" parent_id="0SkJJATCLRmc" writeOutText="false" indentLevel="1" classfield_id="0SkJJATCLRmc" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
      <codeclassfield role_id="1" listClassName="" field_type="4" parent_id="BPcdkkvf9ZHx" writeOutMethods="false" initialValue=" new vector( )" >
       <header>
        <cppcodedocumentation tag="" />
       </header>
       <ccfdeclarationcodeblock role_id="0" tag="_0" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" text=" vector Vector;" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" writeOutText="false" indentLevel="1" />
        </header>
       </ccfdeclarationcodeblock>
       <codeaccessormethod role_id="0" tag="hblock_tag_6" accessType="0" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_7" accessType="1" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_8" accessType="2" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_9" accessType="3" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
       <codeaccessormethod role_id="0" tag="hblock_tag_10" accessType="4" parent_id="BPcdkkvf9ZHx" writeOutText="false" indentLevel="1" classfield_id="BPcdkkvf9ZHx" canDelete="false" >
        <header>
         <cppcodedocumentation tag="" indentLevel="1" />
        </header>
       </codeaccessormethod>
      </codeclassfield>
     </classfields>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="MUWqJEahCdIv" id="cppheaderMUWqJEahCdIv" fileName="CodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEGENERATIONPOLICY_H&amp;#010;#define CODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qobject.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="U95NLxpwAx5e" id="cppheaderU95NLxpwAx5e" fileName="CodeGenPolicyExt" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEGENPOLICYEXT_H&amp;#010;#define CODEGENPOLICYEXT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qobject.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEGENPOLICYEXT_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeGenPolicyExt.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:46:49&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="ROdeEp21W0qp" id="cppheaderROdeEp21W0qp" fileName="CPPCodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPCODEGENERATIONPOLICY_H&amp;#010;#define CPPCODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenpolicyext.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPCODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="U6W9swSq6lon" id="cppheaderU6W9swSq6lon" fileName="CPPCodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPCODECLASSFIELD_H&amp;#010;#define CPPCODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPCODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="zwh7ZZ49qsor" id="cppheaderzwh7ZZ49qsor" fileName="QWidget" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef QWIDGET_H&amp;#010;#define QWIDGET_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //QWIDGET_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="zAWEYEN1s0SX" id="cppheaderzAWEYEN1s0SX" fileName="CodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEGENERATIONPOLICYPAGE_H&amp;#010;#define CODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;qwidget.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="yFUx992ig7qV" id="cppheaderyFUx992ig7qV" fileName="CPPCodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPCODEGENERATIONPOLICYPAGE_H&amp;#010;#define CPPCODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPCODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="OsrBjOrGsHAf" id="cppheaderOsrBjOrGsHAf" fileName="DCodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCODEGENERATIONPOLICYPAGE_H&amp;#010;#define DCODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="npB2tgdJU4c3" id="cppheadernpB2tgdJU4c3" fileName="JavaCodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACODEGENERATIONPOLICYPAGE_H&amp;#010;#define JAVACODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="UrloMXdiNUt6" id="cppheaderUrloMXdiNUt6" fileName="RubyCodeGenerationPolicyPage" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCODEGENERATIONPOLICYPAGE_H&amp;#010;#define RUBYCODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenerationpolicypage.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCODEGENERATIONPOLICYPAGE_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" writeOutText="false" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="vshOusFS3rfc" id="cppheadervshOusFS3rfc" fileName="UMLPackage" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        UMLPackage.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:48:07&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="OM9K2aXZCevL" id="cppheaderOM9K2aXZCevL" fileName="CodeMethodBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEMETHODBLOCK_H&amp;#010;#define CODEMETHODBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeblockwithcomments.h&quot;&amp;#010;#include &quot;ownedcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEMETHODBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeMethodBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:23:19&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="eIS4WxEeax3z" id="cppheadereIS4WxEeax3z" fileName="CodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEOPERATION_H&amp;#010;#define CODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codemethodblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeOperation.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:46&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="Iu53SfgdXlut" id="cppheaderIu53SfgdXlut" fileName="CPPHeaderCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPHEADERCODEOPERATION_H&amp;#010;#define CPPHEADERCODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPHEADERCODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPHeaderCodeOperation.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:36&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="jLvKjwr5hcTJ" id="cppheaderjLvKjwr5hcTJ" fileName="CPPSourceCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPSOURCECODEOPERATION_H&amp;#010;#define CPPSOURCECODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPSOURCECODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPSourceCodeOperation.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:38&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="qTrW45AMzFPQ" id="cppheaderqTrW45AMzFPQ" fileName="DCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCODEOPERATION_H&amp;#010;#define DCODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeOperation.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:41&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="u53RovKYEDqv" id="cppheaderu53RovKYEDqv" fileName="JavaCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACODEOPERATION_H&amp;#010;#define JAVACODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeOperation.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:43&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="9f1qIU76vyaz" id="cppheader9f1qIU76vyaz" fileName="RubyCodeOperation" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCODEOPERATION_H&amp;#010;#define RUBYCODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeoperation.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCODEOPERATION_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeOperation.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Tue Jul 29 2008 at 15:56:46&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="NHEMZRBuya6J" id="cppheaderNHEMZRBuya6J" fileName="TextBlock_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        TextBlock_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:03:23&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="d2p7tg7NMtAb" id="cppheaderd2p7tg7NMtAb" fileName="QMap" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QMap.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:06:58&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="FPiPtJrSCuDy" id="cppheaderFPiPtJrSCuDy" fileName="TextBlockList" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        TextBlockList.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:07:40&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="4M0YMb7hwr92" id="cppheader4M0YMb7hwr92" fileName="HierarchicalCodeBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef HIERARCHICALCODEBLOCK_H&amp;#010;#define HIERARCHICALCODEBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeblockwithcomments.h&quot;&amp;#010;#include &quot;codegenobjectwithtextblocks.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //HIERARCHICALCODEBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        HierarchicalCodeBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:21:01&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="ogqxDbXgm7Fg" id="cppheaderogqxDbXgm7Fg" fileName="OwnedHierarchicalCodeBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef OWNEDHIERARCHICALCODEBLOCK_H&amp;#010;#define OWNEDHIERARCHICALCODEBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;hierarchicalcodeblock.h&quot;&amp;#010;#include &quot;ownedcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //OWNEDHIERARCHICALCODEBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        OwnedHierarchicalCodeBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:43:09&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="lvSR6OAGl0B4" id="cppheaderlvSR6OAGl0B4" fileName="CodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODEACCESSORMETHOD_H&amp;#010;#define CODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codemethodblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeAccessorMethod.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:27:57&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="W9KM3A2gK3yw" id="cppheaderW9KM3A2gK3yw" fileName="CPPHeaderCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPHEADERCODEACCESSORMETHOD_H&amp;#010;#define CPPHEADERCODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPHEADERCODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPHeaderCodeAccessorMethod.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:26:29&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="PEOFL23VhXQB" id="cppheaderPEOFL23VhXQB" fileName="CPPSourceCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPSOURCECODEACCESSORMETHOD_H&amp;#010;#define CPPSOURCECODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPSOURCECODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPSourceCodeAccessorMethod.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:26:32&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="cCtfvPQxlaRq" id="cppheadercCtfvPQxlaRq" fileName="DCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCODEACCESSORMETHOD_H&amp;#010;#define DCODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeAccessorMethod.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:27:52&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="ResUt6N6FjJr" id="cppheaderResUt6N6FjJr" fileName="JavaCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACODEACCESSORMETHOD_H&amp;#010;#define JAVACODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeAccessorMethod.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:27:55&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="cdmLc2CEC5t8" id="cppheadercdmLc2CEC5t8" fileName="RubyCodeAccessorMethod" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCODEACCESSORMETHOD_H&amp;#010;#define RUBYCODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeaccessormethod.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCODEACCESSORMETHOD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeAccessorMethod.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:27:57&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="XcUrOBmtxmKw" id="cppheaderXcUrOBmtxmKw" fileName="CodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CODECLASSFIELDDECLARATIONBLOCK_H&amp;#010;#define CODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeblockwithcomments.h&quot;&amp;#010;#include &quot;ownedcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeClassFieldDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:37:49&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="OJJ1HVZly9bb" id="cppheaderOJJ1HVZly9bb" fileName="CPPHeaderCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPHEADERCODECLASSFIELDDECLARATIONBLOCK_H&amp;#010;#define CPPHEADERCODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPHEADERCODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPHeaderCodeClassFieldDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:35:07&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="kTfHorqKJu52" id="cppheaderkTfHorqKJu52" fileName="CPPSourceCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPSOURCECODECLASSFIELDDECLARATIONBLOCK_H&amp;#010;#define CPPSOURCECODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPSOURCECODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPSourceCodeClassFieldDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:35:09&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="lhR0LFgyIeSw" id="cppheaderlhR0LFgyIeSw" fileName="DCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCODECLASSFIELDDECLARATIONBLOCK_H&amp;#010;#define DCODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeClassFieldDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:37:04&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="CX4wTB2ARs4d" id="cppheaderCX4wTB2ARs4d" fileName="JavaCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACODECLASSFIELDDECLARATIONBLOCK_H&amp;#010;#define JAVACODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeClassFieldDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:37:07&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="lysPzzxQLIHW" id="cppheaderlysPzzxQLIHW" fileName="RubyCodeClassFieldDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCODECLASSFIELDDECLARATIONBLOCK_H&amp;#010;#define RUBYCODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfielddeclarationblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCODECLASSFIELDDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeClassFieldDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:37:49&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="SHu6nDwDWxEZ" id="cppheaderSHu6nDwDWxEZ" fileName="CPPHeaderClassDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef CPPHEADERCLASSDECLARATIONBLOCK_H&amp;#010;#define CPPHEADERCLASSDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;ownedhierarchicalcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //CPPHEADERCLASSDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CPPHeaderClassDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:38:52&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="om0wYqKDlU2d" id="cppheaderom0wYqKDlU2d" fileName="DClassDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCLASSDECLARATIONBLOCK_H&amp;#010;#define DCLASSDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;ownedhierarchicalcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCLASSDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DClassDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:43:04&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="UK8CHmsdfe6T" id="cppheaderUK8CHmsdfe6T" fileName="JavaClassDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACLASSDECLARATIONBLOCK_H&amp;#010;#define JAVACLASSDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;ownedhierarchicalcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACLASSDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaClassDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:43:06&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="B4k5dbNoMrqx" id="cppheaderB4k5dbNoMrqx" fileName="RubyClassDeclarationBlock" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCLASSDECLARATIONBLOCK_H&amp;#010;#define RUBYCLASSDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;ownedhierarchicalcodeblock.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCLASSDECLARATIONBLOCK_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyClassDeclarationBlock.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:43:09&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="fCdVDTUs9mun" id="cppheaderfCdVDTUs9mun" fileName="DCodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCODECLASSFIELD_H&amp;#010;#define DCODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeClassField.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:44:36&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="2Orhhvd0SErt" id="cppheader2Orhhvd0SErt" fileName="JavaCodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACODECLASSFIELD_H&amp;#010;#define JAVACODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeClassField.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:44:38&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="bLR0Lugy5HSI" id="cppheaderbLR0Lugy5HSI" fileName="RubyCodeClassField" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCODECLASSFIELD_H&amp;#010;#define RUBYCODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codeclassfield.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCODECLASSFIELD_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeClassField.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:44:41&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="rfoPnMdBM4KY" id="cppheaderrfoPnMdBM4KY" fileName="DCodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef DCODEGENERATIONPOLICY_H&amp;#010;#define DCODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenpolicyext.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //DCODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        DCodeGenerationPolicy.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:46:44&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="sc9L4fq9Cd3i" id="cppheadersc9L4fq9Cd3i" fileName="JavaCodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef JAVACODEGENERATIONPOLICY_H&amp;#010;#define JAVACODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenpolicyext.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //JAVACODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        JavaCodeGenerationPolicy.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:46:47&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="QD1JRKvGxjdk" id="cppheaderQD1JRKvGxjdk" fileName="RubyCodeGenerationPolicy" writeOutCode="true" >
     <textblocks>
      <codeblockwithcomments tag="hashDefBlock" text="#ifndef RUBYCODEGENERATIONPOLICY_H&amp;#010;#define RUBYCODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="includes" text="#include &lt;string>&amp;#010;#include &quot;codegenpolicyext.h&quot;&amp;#010;" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <codeblockwithcomments tag="using" writeOutText="false" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
      <hierarchicalcodeblock tag="namespace" canDelete="false" >
       <header>
        <cppcodedocumentation tag="" text="Namespace" />
       </header>
       <textblocks>
        <codeblockwithcomments tag="enums" writeOutText="false" >
         <header>
          <cppcodedocumentation tag="" writeOutText="false" />
         </header>
        </codeblockwithcomments>
       </textblocks>
      </hierarchicalcodeblock>
      <codeblockwithcomments tag="hashDefBlockEnd" text="#endif //RUBYCODEGENERATIONPOLICY_H" >
       <header>
        <cppcodedocumentation tag="" writeOutText="false" />
       </header>
      </codeblockwithcomments>
     </textblocks>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        RubyCodeGenerationPolicy.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Thu Jul 31 2008 at 23:46:49&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".h" parent_class="rf2HpDpVQn5w" id="cppheaderrf2HpDpVQn5w" fileName="CodeDocument_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        CodeDocument_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:49&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".h" parent_class="f0G2JJryL6nW" id="cppheaderf0G2JJryL6nW" fileName="const_QString_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        const_QString_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:49&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".h" parent_class="Kr387OdW8qKs" id="cppheaderKr387OdW8qKs" fileName="QDomDocument_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QDomDocument_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:50&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".h" parent_class="8jB92Tz5c4RD" id="cppheader8jB92Tz5c4RD" fileName="QDomElement_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QDomElement_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:50&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Logical View" fileExt=".h" parent_class="5jQ58fhxUjWi" id="cppheader5jQ58fhxUjWi" fileName="QTextStream" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QTextStream.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:50&amp;#010;The original location of this file is Logical_View&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".h" parent_class="BrdhYqvTUF57" id="cppheaderBrdhYqvTUF57" fileName="QTextStream_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        QTextStream_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".h" parent_class="Lu4pbaWmS9R0" id="cppheaderLu4pbaWmS9R0" fileName="const_TextBlock_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        const_TextBlock_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".h" parent_class="abeY7wglduGy" id="cppheaderabeY7wglduGy" fileName="const_ContentType_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        const_ContentType_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
    <classifiercodedocument package="Datatypes" fileExt=".h" parent_class="bCXrl17nI0wk" id="cppheaderbCXrl17nI0wk" fileName="const_CodeBlock_" writeOutCode="true" >
     <textblocks/>
     <header>
      <codecomment tag="" text="/************************************************************************&amp;#010;                        const_CodeBlock_.h - Copyright kde-devel&amp;#010;&amp;#010;Here you can write a license for your code, some comments or any other&amp;#010;information you want to have in your generated code. To to this simply&amp;#010;configure the &quot;headings&quot; directory in uml to point to a directory&amp;#010;where you have your heading files.&amp;#010;&amp;#010;or you can just replace the contents of this file with your own.&amp;#010;If you want to do this, this file is located at&amp;#010;&amp;#010;/home/kde-devel/kde/share/apps/umbrello/headings/heading.h&amp;#010;&amp;#010;-->Code Generators searches for heading files based on the file extension&amp;#010;   i.e. it will look for a file name ending in &quot;.h&quot; to include in C++ header&amp;#010;   files, and for a file name ending in &quot;.java&quot; to include in all generated&amp;#010;   java code.&amp;#010;   If you name the file &quot;heading.&lt;extension>&quot;, Code Generator will always&amp;#010;   choose this file even if there are other files with the same extension in the&amp;#010;   directory. If you name the file something else, it must be the only one with that&amp;#010;   extension in the directory to guarantee that Code Generator will choose it.&amp;#010;&amp;#010;you can use variables in your heading files which are replaced at generation&amp;#010;time. possible variables are : author, date, time, filename and filepath.&amp;#010;just write %variable_name%&amp;#010;&amp;#010;This file was generated on Wed Aug 27 2008 at 19:19:51&amp;#010;The original location of this file is Datatypes&amp;#010;**************************************************************************/&amp;#010;" />
     </header>
     <classfields/>
    </classifiercodedocument>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
